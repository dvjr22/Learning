pro <- read.csv("/home/valdeslab/PDB_files/pdb_scripts/sql_scripts/QueryResults/pro_data.csv")
View(pro)
View(pro)
gly <- read.csv("/home/valdeslab/PDB_files/pdb_scripts/sql_scripts/QueryResults/gly_data.csv")
View(gly)
View(gly)
rm(pro)
rm(gly)
gly <- read.csv("/home/valdeslab/PDB_files/pdb_scripts/sql_scripts/QueryResults/gly_data.csv", header = FALSE)
pro <- read.csv("/home/valdeslab/PDB_files/pdb_scripts/sql_scripts/QueryResults/pro_data.csv", header = FALSE)
view(gly)
View(pro)
View(pro)
View(pro.V5)
attach(pro)
View(pro.V5)
View(V5)
plot(V5,V6)
summary(pro)
proPhi = Pro.V5
proPhi = pro.V5
proPhi = V5
proSi = V6
kde2d(proPhi, proSi, h, n = 25, lims = c(range(proPhi), range(proSi)))
library("MASS", lib.loc="/usr/lib/R/library")
kde2d(proPhi, proSi, h, n = 25, lims = c(range(proPhi), range(proSi)))
kde2d(proPhi, proSi, n = 25, lims = c(range(proPhi), range(proSi)))
test = kde2d(proPhi, proSi, n = 25, lims = c(range(proPhi), range(proSi)))
plot(test)
glyPhi - gly.V5
glyPhi = gly.V5
attach(gly)
View(V5)
glyPhi = V5
glyPsi = V6
proPsi = proSi
rm(proSi)
proPhiPsi = kde2d(proPhi, proSi, n = 25, lims = c(range(proPhi), range(proSi)))
glyPhiPsi = kde2d(glyPhi, glyPsi, n = 25, lims = c(range(glyPhi), range(glySi)))
proPhiPsi = kde2d(proPhi, proPsi, n = 25, lims = c(range(proPhi), range(proPsi)))
glyPhiPsi = kde2d(glyPhi, glyPsi, n = 25, lims = c(range(glyPhi), range(glyPsi)))
plot(proPhiPsi)
plot(glyPhiPsi)
rm(list = ls(all = TRUE))
#Clear all variables
rm(list = ls(all = TRUE))
#Quit R
q(save = "yes")
#Citations
citation()
citation(MASS)
#Load a package
library(MASS)
citation(MASS)
citation("MASS")
a = 59
b = 55
c = 53.5
d = 55
e = 52.5
Wing1 = a
Wing2 = b
Wing3 = c
Wing4 = d
Wing5 = e
sqrt(Wing1)
2 * Wing1
Wing1 + Wing2
Wing1 + Wing2 + Wing3 + Wing4 + Wing5
(Wing1 + Wing2 + Wing3 + Wing4 + Wing5)/5
SQ.wing1 = sqrt(Wing1)
mul.w1 = 2 * Wing1
Sum.12 = Wing1 + Wing2
SUM12345 = Wing1 + Wing2 + Wing3 + Wing4 + Wing5
Av = (Wing1 + Wing2 + Wing3 + Wing4 + Wing5)/5
#Brackets to show value
(SQ.wing2 = sqrt(Wing2))
#Concatenate values with c()
Wingcrd = c(a,b,c,d,e, 57.5, 53, 55)
Wingcrd
#Access data just like array
Wingcrd[1]
Wingcrd[2]
Wingcrd[0]
#Display a range
Wingcrd[1 : 5]
#Display all except second value
Wingcrd[-2]
Wingcrd[-2 : -5]
#Add all values
sum(Wingcrd)
s.win = sum(Wingcrd)
sum(Wingcrd)
s.win = sum(Wingcrd)
s.exclude = sum(Wingcrd[-2: -6])
s.win
s.exclude
#Test data
Tarsus <- c(22.3, 19.7, 20.8, 20.3, 20.8, 21.5, 20.6, 21.5)
Head <- c(31.2, 30.4, 30.6, 30.3, 30.3, 30.8, 32.5, NA)
Wt <- c(9.5, 13.8, 14.8, 15.2, 15.5, 15.6, 15.6, 15.7)
sum(Head)
?sum
sum(Head, na.rm = TRUE)
?sum #Read documentation to solve
#Combining variables
BirdData = c(Wingcrd, Tarsus, Head, Wt)
BirdData
Id <- c(1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4)
Id
#repeat()
Id = rep(c(1, 2, 3, 4), each = 8)
#And simplified using a range
Id = rep(1 : 4, each = 8)
Id <- c(1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4)
Id
#repeat()
#Produces the same vector as above
Id = rep(c(1, 2, 3, 4), each = 8)
Id
#And simplified using a range
Id = rep(1 : 4, each = 8)
Id
#Produces a sequence
a = seq(from = 1, to = 4, by = 1)
a
#combine the two
a = seq(from = 1, to = 4, by = 1)
a
a = rep(a, each = 8)
a
VarNames = c("Wingcrd", "Tarsus", "Head", "Wt")
VarNames
Id2 = rep(VarNames, each = 8)
Id2
Id2NoEach = rep(VarNames, 8)
Id2NoEach
?rep
#cbind()
#Contains original varibles in columns
Z = cbind(Wingcrd, Tarsus, Head, Wt)
Z
Wingcrd
Z = cbind(Wingcrd, Tarsus, Head, Wt)
Z
#Access n column
Z[ , 1]
Z[ , 1] #column 1
Z[1:8, 1] #column 1
Z[2, ] #row 2
Z[2, 1:4] #row2
#Experiments with access
Z[1, 1] #row 1, column 1
Z[ , 2:3] #column 2 and 3
X = Z[4, 4] #row4, column4
X
X = Z[4, 4] #row4, column4
X
Y = Z[ , 4] #column 4
Y
Z
W = Z[ , -3] #exclude column 3
W
D = Z[ , c(1, 3, 4)] #column 1, 3, 4
D
E = Z [ , c(-1, -3)] #exclude column 1 and 3
E
#dimensions of Z
dim(Z)
(nrow = dim(z)[1])
(nrow = dim(Z)[1])
(ncol = dim(Z)[2])
?nrow
nrow(Z)
nrow
rm(nrow)
rm(ncol)
Zrow = nrow(Z)
Zcol = ncol(Z)
Zrow
Zcol
#rbind()
#Arrange var in rows
Z2 = rbind(Wingcrd, Tarsus, Head, Wt)
Z2
?edit
?fix
#vector()
#Create a vector...yay!
W = vector(length = 8)
W #Will return FALSE
W[1] = 59
W[2] = 55
W[3] = 53.5
W[4] = 55
W[5] = 52.5
W[6] = 57.5
W[7] = 53
W[8] = 55
W
W[1]
W[1:4]
W[2:6]
W[-2]
W[c(1,2,3)]
q()
ions
Dmat = matrix(nrow = 8, ncol = 4)
Dmat
#Load data
Dmat[ , 1] = windCrd
Dmat[ , 2] = c(22.3, 19.7, 20.8, 20.3, 20.8, 21.5, 20.6, 21.5) #Tarsus
Dmat[ , 3] = Head
Dmat[ , 4] = Wt
#Load data
Dmat[ , 1] = WingCrd
#Load data
Dmat[ , 1] = Wingcrd
Dmat
#Add column names
colnames(Dmat) = VarNames
Dmat
Dmat[1, 1] = 59.0
Dmat[1, 2] = 22.3
Dmat
Dmat2 = as.matrix(cbind(Wingcrd, Tarsus, Head, Wt))
Dmat
Dmat2
is.matrix(Dmat)
is.matrix(Wingcrd)
solve(Dmat)
t(Dmat)
Dmat
Dmat %*% Dmat2
Dmat * Dmat2
Dfrm = data.frame(WC = Wingcrd, TS = Tarsus, HD = Head, W = Wt)
Dfrm
#Fill by element
Dmat[1, 1] = 500.0 #Row 1, Col 1
Dmat
Wingcrd
#Fill by element
Dmat[1, 1] = 59.0 #Row 1, Col 1
Dmat
Dfrm = data.frame(WC = Wingcrd, TS = Tarsus, HD = Head, W = Wt, Wsq = sqrt(Wt))
Dfrm
rm(Wt)
Wt #Gives error
Dfrm$W #returns data in frame that was deleted
Wt = Dfrm$W
Wt
Wt
rm(Wt)
Wt #Gives error
Dfrm$W #returns data in frame that was deleted
#list()
#Can hold a variety of data in varying formats
x1 = c(1, 2, 3)
x2 = c("a", "b", "c", "d")
x3 = 3
x4 = matrix(nrow = 2, ncol =2)
x4[ , 1] = c(1, 2)
x4[ , 2] = c(3, 4)
Y = list(x1 = x1, x2 = x2, x3 = x3, x4 = x4)
Y
#Access elements in list
Y$x2
Y$x1
#Apply linear regression to see list output
M = lm(WC ~ Wt, data = Dfrm)
Wt = Dfrm$W #Bring it back
#Apply linear regression to see list output
M = lm(WC ~ Wt, data = Dfrm)
M
names(M)
M$coefficients
M$residuals
?lm
#Store all bird data
AllData = list(BirdData = BirdData, Id = Id2, Z = Z, VarNames = VarNames)
AllData
#Entering Data
#Best to use a col = var, row = sample format
Squid = read.table(file = "/home/valdeslab/Learning/LearningR/RBook/squid.txt", header = TRUE)
Squid
Squid$Sample
Squid$Sex
Test = read.table(file = "/RBook/squid.txt", header = TRUE)
Test = read.table(file = "LearningR/RBook/squid.txt", header = TRUE)
setwd("/home/valdeslab/Learning/LearningR")
Test = read.table(file = "/RBook/squid.txt", header = TRUE)
Test = read.table(file = "RBook/squid.txt", header = TRUE)
rm(Test)
#scan() will import numerical data into a matrix
?scan
Test = scan("RBook/squid.txt")
Test = scan("RBook/squid.txt", skip = 1)
Test
Squid
#scan() will import numerical data into a matrix
?scan
rm(Test)
#Accessing data from other statistical packages
library(foreign)
?read.mtp
#Can also import data directly from db
library(RODBC)
install.packages("RODBC")
#Can also import data directly from db
#This package has to be installed
library(RODBC)
Len = c(75, 85, 91.6, 95, NA, 105.5, 106)
Tb = c(0, 0, 1, NA, 0, 0, 0)
Farm = c("MO", "MO", "MO", "MO", "LN", "SE", "QM")
Month = c(11, 07, 07, NA, 09, 09, 11)
?avg
mean(Len)
?mean
mean(Len, na.rm = FALSE)
mean(Len, na.rm = TRUE)
AvgLen = mean(Len, na.rm = TRUE)
