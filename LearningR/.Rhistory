dotchart(Deer$LCT[!Isna],
groups = factor(Deer$Sex[!Isna]),
xlab = "Length (cm)", ylab = "Observation number"
)
#Adding mean
Benthic = read.table("RBook/RIKZ2.txt", header = TRUE)
Benthic$fBeach = factor(Benthic$Beach)
View(Benthic)
par(mfrow = c(2,2))
dotchart(Benthic$Richness,
groups = Benthic$fBeach,
xlab = "Richness", ylab = "Beach")
Bent.M = tapply(Benthic$Richness, Benthic$Beach, mean)
tapply
for
dotchart(Benthic$Richness,
groups = Benthic$fBeach,
gdata = Bent.M, gpch = 19,
lab = "Richness", ylab = "Beach")
dotchart(Benthic$Richness,
groups = Benthic$fBeach,
gdata = Bent.M, gpch = 19,
xlab = "Richness", ylab = "Beach")
clear = function() {
if(!is.null(dev.list())) dev.off()
}
clear()
clear()
dotchart(Benthic$Richness,
groups = Benthic$fBeach,
xlab = "Richness", ylab = "Beach")
dotchart(Benthic$Richness,
groups = Benthic$fBeach,
xlab = "Richness", ylab = "Beach")
Bent.M = tapply(Benthic$Richness, Benthic$Beach, mean) #Get mean for each beach
dotchart(Benthic$Richness,
groups = Benthic$fBeach,
gdata = Bent.M, gpch = 19,
xlab = "Richness", ylab = "Beach")
legend("bottomright", c("values", "mean"), pch = c(1,19), bg = "white"
)
#setwd("/home/diego/Learning/LearningR") #Laptop
#setwd("/home/valdeslab/Learning/LearningR") #GreenMachine
rm(list = ls()) #clear environment
Owls = read.table(file = "RBook/Owls.txt", header = TRUE)
names(Owls)
str(Owls)
dotchart(Owls$SiblingNegotiation)
dotchart(Owls$SiblingNegotiation, xlab = "Negotiation", ylab = "Observation Number")
dotchart(Owls$NegPerChick, xlab = "Negotiation", ylab = "Observation Number")
dotchart(Owls$ArrivalTime, xlab = "Arrival Time", ylab = "Observations")
ifelse(Owls$FoodTreatment == "Deprived", Owls$Night = 1, Owls$Night = 2)
Owls$Night = ifelse(Owls$FoodTreatment == "Deprived", 1,  2)
View(Owls)
dotchart(Owls$ArrivalTime,
groups = factor(Owls$Night),
main = "Arrival Time Per Night",
xlab = "Arrival", ylab = "Observations")
Parasite = read.table(file = "RBook/CodParasite.txt", header = TRUE)
names(Parasite)
str(Parasite)
dotchart(Parasite$Intensity,
groups = factor(Parasite$Area),
main = "Parasites",
xlab = "Intensity", ylab = "Area"
)
dotchart(Parasite$Intensity,
groups = factor(Parasite$Sex),
main = "Parasites",
xlab = "Intensity", ylab = "Area"
)
dotchart(Parasite$Intensity,
groups = factor(Parasite$Stage),
main = "Parasites",
xlab = "Intensity", ylab = "Area"
)
dotchart(Parasite$Intensity,
groups = factor(Parasite$Year),
main = "Parasites",
xlab = "Intensity", ylab = "Area"
)
View(Parasite)
dotchart(Parasite$Intensity,
groups = factor(Parasite$Area),
main = "Parasites",
xlab = "Intensity", ylab = "Area"
)
names(Parasite)
dotchart(Parasite$Depth,
groups = factor(Parasite$Prevalence),
main = "Parasites",
xlab = "Intensity", ylab = "Area"
)
str(Parasite)
unique(Parasite$Prevalence)
clear()
#Clears all plots
clear = function() {
if (!is.null(dev.list())) dev.off()
}
clear()
dotchart(Owls$NegPerChick, main = "Negotiations", xlab = "Negotiation", ylab = "Observations")
dotchart(Owls$ArrivalTime, main = "Arrival Times", xlab = "Arrival Time", ylab = "Observations")
clear()
dotchart(Owls$ArrivalTime,
groups = factor(Owls$Night), #Could use FoodTreatment here instead
main = "Arrival Time Per Night",
xlab = "Arrival", ylab = "Observations")
clear()
dotchart(Parasite$Intensity,
groups = factor(Parasite$Area),
main = "Parasites",
xlab = "Intensity", ylab = "Area"
)
dotchart(Parasite$Depth,
groups = factor(Parasite$Prevalence),
main = "Parasites",
xlab = "Depth", ylab = "Prevalence"
)
clear()
#Plot
methods(plot)
methods(dotchart)
Benthic = read.table("RBook/RIKZ2.txt", header = TRUE)
Benthic$fBeach = factor(Benthic$Beach) #Create a factor column
plot(Benthic$Richness ~ Benthic$fBeach)
boxplot(Richness ~ Beach, data = Benthic, col = "grey",
xlab = "Beach", ylab = "Richness")
#Both produce same plot
boxplot(Richness ~ Beach, data = Benthic, xlab = "Beach", ylab = "Richness")
plot(Benthic$Richness ~ Benthic$fBeach) #produces boxplot based on data submitted
plot(Benthic$Richness ~ Benthic$fBeach, xlab = "Beach", ylab = "Richness") #produces boxplot based on data submitted
#Both produce same plot
boxplot(Richness ~ Beach, data = Benthic, xlab = "Beach", ylab = "Richness")
plot(Benthic$Richness ~ Benthic$fBeach, xlab = "Beach", ylab = "Richness") #produces boxplot based on data submitted
plot(x = Benthic$NAP, y = Benthic$Richness,
xlab = "Mean high tide (m)", ylab = "Species Richness",
main = "Benthic data")
M0 = lm(Richness ~NAP, data = Benthic)
abline(M0)
plot(x = Benthic$NAP, y = Benthic$Richness,
xlab = "Mean high tide (m)", ylab = "Species Richness",
main = "Benthic data",
xlim = c(0,20), ylim = c(-3,3))
plot(x = Benthic$NAP, y = Benthic$Richness,
xlab = "Mean high tide (m)", ylab = "Species Richness",
main = "Benthic data",
xlim = c(-3,3), ylim = c(0,20))
abline(M0) #Add the line to the graph
plot(x = Benthic$NAP, y = Benthic$Richness,
xlab = "Mean high tide (m)", ylab = "Species Richness",
main = "Benthic data",
xlim = c(-3,3), ylim = c(0,20))
plot(x = Benthic$NAP, y = Benthic$Richness,
xlab = "Mean high tide (m)", ylab = "Species Richness",
main = "Benthic data",
axes = FALSE,
xlim = c(-3,3), ylim = c(0,20))
plot(x = Benthic$NAP, y = Benthic$Richness,
xlab = "Mean high tide (m)", ylab = "Species Richness",
main = "Benthic data",
axes = FALSE)
points(y = Benthic$Richness, x = Benthic$NAP)
clear()
points(y = Benthic$Richness, x = Benthic$NAP)
plot(x = Benthic$NAP, y = Benthic$Richness,
xlab = "Mean high tide (m)", ylab = "Species Richness",
main = "Benthic data",
axes = FALSE)
points(y = Benthic$Richness, x = Benthic$NAP)
plot(x = Benthic$NAP, y = Benthic$Richness,
xlab = "Mean high tide (m)", ylab = "Species Richness",
main = "Benthic data",
type = "n", axes = FALSE)
points(y = Benthic$Richness, x = Benthic$NAP)
min(Benthic$Richness)
max((Benthic$Richness))
plot(x = Benthic$NAP, y = Benthic$Richness,
xlab = "Mean high tide (m)", ylab = "Species Richness",
main = "Benthic data",
xlim = c(-3,3), ylim = c(min(Benthic$Richness), max((Benthic$Richness))))
plot(x = Benthic$NAP, y = Benthic$Richness,
xlab = "Mean high tide (m)", ylab = "Species Richness",
main = "Benthic data",
xlim = c(-1.75, 2), ylim = c(0, 20),
type = "n", axes = FALSE) #type - don't plot points, and now axes
points(y = Benthic$Richness, x = Benthic$NAP) #Add these points to the graph
axis(2, at = c(0,10,20), tcl = 1)
axis(2, at = c(0,10,20), tcl = 2) #add axis on right with values
axis(2, at = c(0,10,20), tcl = ) #add axis on right with values
axis(2, at = c(0,10,20), tcl = 1) #add axis on right with values
plot(x = Benthic$NAP, y = Benthic$Richness,
xlab = "Mean high tide (m)", ylab = "Species Richness",
main = "Benthic data",
xlim = c(-1.75, 2), ylim = c(0, 20),
type = "n", axes = FALSE) #type - don't plot points, and no axes
points(y = Benthic$Richness, x = Benthic$NAP) #Add these points to the graph
axis(2, at = c(0,10,20), tcl = 1) #add axis on right with values
axis(1, at = c(-1.75, 0, 2), labels = c("Sea", "Water line", "Dunes"))
Owls = read.table(file = "RBook/Owls.txt", header = TRUE)
names(Owls)
str(Owls)
View(Owls)
View(Owls)
Owls$LogNestling = Owls$SiblingNegotiation log10(Owls$SiblingNegotiation)
Owls$LogNestling =  log10(Owls$SiblingNegotiation)
Owls$LogNestling =  log10(Owls$SiblingNegotiation) + 1
Owls = read.table(file = "RBook/Owls.txt", header = TRUE)
names(Owls)
str(Owls)
Owls$LogNestling =  log10(Owls$SiblingNegotiation) + 1
Owls = read.table(file = "RBook/Owls.txt", header = TRUE)
names(Owls)
str(Owls)
View(Owls)
View(Owls)
Owls$LogNestling =  1 + log10(Owls$SiblingNegotiation)
Owls = read.table(file = "RBook/Owls.txt", header = TRUE)
names(Owls)
str(Owls)
Owls$LogNestling =  1 + Owls$SiblingNegotiation
Owls$LogNestling =  log10(Owls$LogNestling)
Owls = read.table(file = "RBook/Owls.txt", header = TRUE)
names(Owls)
str(Owls)
Owls$LogNestling =  log10(1 + Owls$SiblingNegotiation)
plot(Owls$LogNestling, Owls$ArrivalTime)
plot(Owls$LogNestling, Owls$ArrivalTime,
xlab = "Nestling", ylab = "Arrival Time")
plot(Owls$LogNestling, Owls$ArrivalTime,
xlab = "Nestling", ylab = "Arrival Time")
plot(Owls$LogNestling, Owls$ArrivalTime,
xlab = "Nestling", ylab = "Arrival Time",
axes = FALSE)
axis(2, at = c(1.0, 2.0, 3.0))
axis(2, at = c(1.0, 2.0, 3.0))
plot(Owls$LogNestling, Owls$ArrivalTime,
xlab = "Nestling", ylab = "Arrival Time",
axes = FALSE)
axis(2, at = c(1.0, 2.0, 3.0))
axis(2, at = c(22, 23, 24), labels = c(1.0,2.0,3.0))
plot(Owls$LogNestling, Owls$ArrivalTime,
xlab = "Nestling", ylab = "Arrival Time") #,
plot(Owls$LogNestling, Owls$ArrivalTime,
xlab = "Nestling", ylab = "Arrival Time", #) #,
axes = FALSE)
axis(2, at = c(22, 24, 26, 28), labels = c(1.0,2.0,3.0,4.0))
axis(2, at = c(22, 24, 26, 28, 30), labels = c(1.0,2.0,3.0,4.0, 5.0))
plot(Owls$LogNestling, Owls$ArrivalTime,
xlab = "Nestling", ylab = "Arrival Time",
axes = FALSE)
axis(2, at = c(22, 24, 26, 28, 30), labels = c(1.0,2.0,3.0,4.0, 5.0))
plot(Owls$LogNestling, Owls$ArrivalTime,
xlab = "Nestling", ylab = "Arrival Time")#,
plot(Owls$LogNestling, Owls$ArrivalTime,
xlab = "Nestling", ylab = "Arrival Time",
axes = FALSE)
axis(2, at = c(22, 24, 26, 28, 30), labels = c(1.0,2.0,3.0,4.0, 5.0))
axis(1, at = c(0, 0.5, 1.0, 1.5))
clear
clear()
axis(1, at = c(0, 0.5, 1.0, 1.5))
plot( Owls$ArrivalTime, Owls$LogNestling,
xlab = "Nestling", ylab = "Arrival Time")#,
max(Owls$LogNestling)
Test = Owls$LogNestling[LogNestling == 0] = 0
Test = Owls$LogNestling[Owls$LogNestling == 0] = 0
Test = Owls$LogNestling[, Owls$LogNestling == 0] = 0
plot(Owls$ArrivalTime, Owls$LogNestling,
xlab = "Nestling", ylab = "Arrival Time",
axes = FALSE)
plot(Owls$ArrivalTime, Owls$LogNestling,
xlab = "Nestling", ylab = "Arrival Time",
axes = FALSE)
axis(2, at = c(0, 1.0), labels = c(1, 10))
axis(2, at = c(0, 1.0, 2.0), labels = c(1, 10, 20))
plot(Owls$ArrivalTime, Owls$LogNestling,
xlab = "Nestling", ylab = "Arrival Time",
axes = FALSE)
axis(2, at = c(0, 1.0, 2.0), labels = c(1, 10, 20))
axis(1, at = c(22, 24, 26, 28, 30), labels = c(1.0,2.0,3.0,4.0, 5.0))
plot(Owls$LogNestling, Owls$ArrivalTime,
xlab = "Nestling", ylab = "Arrival Time",
axes = FALSE)
axis(2, at = c(22, 24, 26, 28, 30), labels = c(1.0,2.0,3.0,4.0, 5.0))
axis(1, at = c(0, 0.5, 1.0, 1.5))
max(Owls$LogNestling)
plot(Owls$ArrivalTime, Owls$LogNestling,
xlab = "Nestling", ylab = "Arrival Time",
axes = FALSE)
axis(2, at = c(0, 1.0, 2.0), labels = c(1, 10, 20))
axis(1, at = c(22, 24, 26, 28, 30), labels = c(1.0,2.0,3.0,4.0, 5.0))
max(Owls$LogNestling)
plot(Owls$ArrivalTime, Owls$LogNestling,
ylab = "Nestling", xlab = "Arrival Time",
axes = FALSE)
axis(2, at = c(0, 1.0, 2.0), labels = c(1, 10, 20))
axis(1, at = c(22, 24, 26, 28, 30), labels = c(1.0,2.0,3.0,4.0, 5.0))
plot(Owls$LogNestling, Owls$ArrivalTime,
xlab = "Nestling", ylab = "Arrival Time",
axes = FALSE)
axis(2, at = c(22, 24, 26, 28, 30), labels = c(1.0,2.0,3.0,4.0, 5.0))
axis(1, at = c(0, 0.5, 1.0, 1.5))
max(Owls$LogNestling)
plot(Owls$ArrivalTime, Owls$LogNestling,
ylab = "Nestling", xlab = "Arrival Time",
axes = FALSE)
axis(2, at = c(0, 1.0, 2.0), labels = c(1, 10, 20))
axis(1, at = c(22, 24, 26, 28, 30), labels = c(1.0,2.0,3.0,4.0, 5.0))
freshStart = function() {
if (!is.null(dev.list())) dev.off() #Clears all plots if any exist
rm(list = ls()) #clear environment
}
freshStart()
rm(list = ls()) #clear environment
Benthic = read.table("RBook/RIKZ2.txt", header = TRUE)
freshStart = function() {
if (!is.null(dev.list())) dev.off() #Clears all plots if any exist
rm(list = ls()) #clear environment
}
freshStart()
freshStart()
rm(list = ls()) #clear environment
Birds = read.table("RBook/loyn.txt", header = TRUE)
Birds$LOGAREA = log10(Birds$AREA)
plot(Birds$LOGAREA, Birds$ABUND,
xlab = "Log transformed Area", ylab = "Bird abundance")
plot(Birds$LOGAREA, Birds$ABUND,
xlab = "Log transformed Area", ylab = "Bird abundance")1
names(Birds)
str(Birds)
Birds$fGRAZE = factor(Birds$GRAZE)
View(Birds)
M0 = lm(Birds$ABUND ~ Birds$LOGAREA + Birds$fGRAZE)
summary(M0)
LAR = seq(-1, 3, 1)
ABUND1 = 15.7 + 7.2 * LAR
ABUND2 = 16.1 + 7.2 * LAR
ABUND3 = 15.5 + 7.2 * LAR
ABUND4 = 14.1 + 7.2 * LAR
ABUND5 = 3.8 + 7.2 * LAR
#Add lines
Avalues = c(ABUND1, ABUND2, ABUND3, ABUND4, ABUND5)
Birds = read.table("RBook/loyn.txt", header = TRUE)
names(Birds)
str(Birds)
Birds$LOGAREA = log10(Birds$AREA) #Create col of log10 values
Birds$fGRAZE = factor(Birds$GRAZE)
plot(Birds$LOGAREA, Birds$ABUND,
xlab = "Log transformed Area", ylab = "Bird abundance")
M0 = lm(Birds$ABUND ~ Birds$LOGAREA + Birds$fGRAZE) #Apply Linear Regression model
summary(M0)
LAR = seq(-1, 3, 1) #range of observed data
#Determine abundance values
ABUND1 = 15.7 + 7.2 * LAR
ABUND2 = 16.1 + 7.2 * LAR
ABUND3 = 15.5 + 7.2 * LAR
ABUND4 = 14.1 + 7.2 * LAR
ABUND5 = 3.8 + 7.2 * LAR
#Add lines
Avalues = c(ABUND1, ABUND2, ABUND3, ABUND4, ABUND5)
for(i in 1:length(Avalues)){
lines(LAR, Avalues[i], lty = i, lwd = i, col = i)
}
lines(LAR, ABUND1, lty = 1, lwd = 1, col = 1)
lines(LAR, ABUND1, lty = 1, lwd = 1, col = 1)
lines(LAR, ABUND1, lty = 1, lwd = 1, col = 1)
lines(LAR, ABUND1, lty = 1, lwd = 1, col = 1)
lines(LAR, ABUND1, lty = 1, lwd = 1, col = 1)
lines(LAR, ABUND1, lty = 1, lwd = 1, col = 1)
for(i in 1:length(Avalues)){
lines(LAR, Avalues[i], lty = i, lwd = i, col = i)
}
Birds = read.table("RBook/loyn.txt", header = TRUE)
names(Birds)
str(Birds)
Birds$LOGAREA = log10(Birds$AREA) #Create col of log10 values
Birds$fGRAZE = factor(Birds$GRAZE)
plot(Birds$LOGAREA, Birds$ABUND,
xlab = "Log transformed Area", ylab = "Bird abundance")
M0 = lm(Birds$ABUND ~ Birds$LOGAREA + Birds$fGRAZE) #Apply Linear Regression model
summary(M0)
LAR = seq(-1, 3, 1) #range of observed data
#Determine abundance values
ABUND1 = 15.7 + 7.2 * LAR
ABUND2 = 16.1 + 7.2 * LAR
ABUND3 = 15.5 + 7.2 * LAR
ABUND4 = 14.1 + 7.2 * LAR
ABUND5 = 3.8 + 7.2 * LAR
lines(LAR, ABUND1, lty = 1, lwd = 1, col = 1)
lines(LAR, ABUND2, lty = 2, lwd = 2, col = 2)
lines(LAR, ABUND3, lty = 3, lwd = 3, col = 3)
lines(LAR, ABUND4, lty = 4, lwd = 4, col = 4)
lines(LAR, ABUND5, lty = 5, lwd = 5, col = 5)
?lines
#Add legend
legend.txt = c("Graze 1", "Graze 2", "Graze 3", "Graze 4", "Graze 5")
types = c(1,5,1)
types = seq(1,5,1)
legend("topleft", legend = legend.txt,
col = types,
lty = types,
lwd = types,
bty = "o", cex = 0.8)
clear()
if (!is.null(dev.list())) dev.off()
if (!is.null(dev.list())) dev.off()
Owls = read.table(file = "RBook/Owls.txt", header = TRUE)
names(Owls)
str(Owls)
Owls$LogNestling =  log10(1 + Owls$SiblingNegotiation) #Add 1 to get rid of 0s then get log10
plot(Owls$LogNestling, Owls$ArrivalTime,
xlab = "Nestling", ylab = "Arrival Time")
Veg = read.table(file = "RBook/Vegetation2.txt", header = TRUE)
View(Owls)
View(Veg)
Smoother = loess(Owls$SexParent ~ Owls$LogNestling)
Veg = read.table(file = "RBook/Vegetation2.txt", header = TRUE)
names(Veg)
str(Veg)
names(Veg)
str(Veg)
str(Owls)
Owls$NumSex = as.numeric(levels(Owls$SexParent))[Owls$SexParent]
OwlsMales = Owls[, Owls$SexParent == 1]
View(Owls)
View(OwlsMales)
rm(OwlsMales)
OwlsMales = Owls[, Owls$SexParent == "Male"]
OwlsMales = Owls[Owls$SexParent == "Male", ]
View(OwlsMales)
View(OwlsMales)
OwlsFemales = Owls[Owls$SexParent == "Female", ]
354+245
Male.Loess = loess(OwlsMales$SexParent ~ OwlsMales$LogNestling)
OwlsMales$NumSex = OwlsMales[OwlsMales$SexParent == "Males", ] = 1
Male.Loess = loess(OwlsMales$NumSex ~ OwlsMales$LogNestling)
View(M0)
View(Male.Loess)
Fit = fitted(Male.Loess)
lines(OwlsMales$LogNestling, Fit)
Owls$LogNestling =  log10(1 + Owls$SiblingNegotiation) #Add 1 to get rid of 0s then get log10
plot(Owls$LogNestling, Owls$ArrivalTime,
xlab = "Nestling", ylab = "Arrival Time")
lines(OwlsMales$LogNestling, Fit)
Male.Loess = loess(OwlsMales$LogNestling ~ OwlsMales$NumSex)
Fit = fitted(Male.Loess)
lines(OwlsMales$LogNestling, Fit)
lines(OwlsMales$NumSex, Fit)
#setwd("/home/diego/Learning/LearningR") #Laptop
#setwd("/home/valdeslab/Learning/LearningR") #GreenMachine
rm(list = ls()) #clear environment
Owls = read.table(file = "RBook/Owls.txt", header = TRUE)
names(Owls)
str(Owls)
Owls$LogNestling =  log10(1 + Owls$SiblingNegotiation) #Add 1 to get rid of 0s then get log10
plot(Owls$LogNestling, Owls$ArrivalTime,
xlab = "Nestling", ylab = "Arrival Time")
dev.off()
Owls$LogNestling =  log10(1 + Owls$SiblingNegotiation) #Add 1 to get rid of 0s then get log10
plot(Owls$LogNestling, Owls$ArrivalTime,
xlab = "Nestling", ylab = "Arrival Time")
#New stuff
OwlsM = Owls[Owls$SexParent == "Male", ] #Extract male data
OwlsF = Owls[Owls$SexParent == "Female", ] #Extract female data
OwlsM$NumSex = OwlsM[OwlsM$SexParent == "Males", ] = 1
OwlsF$NumSex = OwlsF[OwlsF$SexParent == "Females", ] = 2
View(Owls)
View(OwlsF)
is.na(OwlsF)
Test = is.na(OwlsF)
View(Test)
colSums(Test)
colSums(Temp1)
naValues = function(X1) {
Temp1 = is.na(X1)
colSums(Temp1)
}
naValues(Owls)
#Clears all plots
clear = function() {
if (!is.null(dev.list())) dev.off()
}
is.na(Owls)
Test = is.na(Owls)
Test
is.vector(Test)
is.data.frame(Test)
is.matrix(Test)
is.matrix(Owls)
is.data.frame(Owls)
removeNa = function(X1) {
X1[complete.cases(X1), ] #Remove rows that have a na value
}
#Cleveland Dotplots
Deer = read.table("RBook/Deer.txt", header = TRUE)
naValues(Deer)
removeNa(Deer)
naValues(Deer)
Test = removeNa(Deer)
naValues
naValues(Test)
#Number of NA values
naValues = function(X1) {
colSums(is.na(X1))
}
#Remove the rows
removeNa = function(X1) {
X1[complete.cases(X1), ] #Remove rows that have a na value
}
naValues(Deer)
rm(Deer, Test)
