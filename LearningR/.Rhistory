#setwd("/home/diego/Learning/LearningR") #Laptop
#setwd("/home/valdeslab/Learning/LearningR") #GreenMachine
rm(list = ls()) #clear environment
#setwd("/home/diego/Learning/LearningR") #Laptop
setwd("/home/valdeslab/Learning/LearningR") #GreenMachine
Owls = read.table(file = "RBook/Owls.txt", header = TRUE)
names(Owls)
str(Owls)
summary(Owls)
unique(Owls$Nest)
Owls.ATV = Owls[Owls$Nest == "AutavauxTV", ] #Get nest data
Owls.ATV
str(Owls.ATV)
#Plot arrival time vs negotiation behavior
plot(x = Owls.ATV$ArrivalTime, y = Owls.ATV$NegPerChick,
main = "AutavauxTV",
xlab = "Arrival Time",
ylab = "Negotiation Behaviour"
)
#Bot nest data
Owls.Bot = Owls[Owls$Nest == "Bochet", ]
Owls.Bot
str(Owls.Bot)
plot(x = Owls.Bot$ArrivalTime, y = Owls.Bot$NegPerChick,
main = "Bochet",
xlab = "Arrival Time",
ylab = "Negotiation Behaviour"
)
#Modify Bot code for better functunality
setwd("/home/valdeslab/Learning/LearningR/Plots/Chapter_6") #GreenMachine for storing plots
Nest.i = "Bochet" #Nest name
Owls.i = Owls[Owls$Nest == Nest.i, ] #All nest data
plot(x = Owls.i$ArrivalTime, y = Owls.i$NegPerChick,
main = Nest.i,
xlab = "Arrival Time",
ylab = "Negotiation Behaviour"
)
dev.off() #Close file
setwd("/home/valdeslab/Learning/LearningR/Plots/Chapter_6/ChapterWork") #GreenMachine for storing plots
#setwd("/home/diego/Learning/LearningR") #Laptop
setwd("/home/valdeslab/Learning/LearningR") #GreenMachine
setwd("/home/valdeslab/Learning/LearningR") #GreenMachine
Veg = read.table(file = "Vegetation2.txt", header = TRUE)
Veg = read.table(file = "RBook/Vegetation2.txt", header = TRUE)
names(Veg)
str(Veg)
#Calculate missing variables
NAPerVariable = function(X1) {
D1 = is.na(X1)
colSums(D1)
}
NAPerVariable(Veg[ , 5:24])
NAPerVariable(Veg)
D1 = is.na(Veg)
View(D1)
View(D1)
rm(D1)
x = c(1,2,3)
x
is.na(x)
NAPerVariable(Veg[ , 5:24])
#Calculate missing variables using a function
NAPerVariable = function(X1) {
D1 = is.na(X1) #Create an equivalent data structure with boolean values
rowSums(D1) #Summ up the columns
}
NAPerVariable(Veg)
colSums(D1) #Summ up the columns
#Calculate missing variables using a function
NAPerVariable = function(X1) {
D1 = is.na(X1) #Create an equivalent data structure with boolean values
colSums(D1) #Summ up the columns
}
NAPerVariable(Veg)
NAPerVariable(x)
colSums(x)
Parasite = read.table(file = "CodParasite.txt", header = TRUE)
Parasite = read.table(file = "RBook/CodParasite.txt", header = TRUE)
names(Parasite)
str(Parasite)
NAPerVariable(Parasite)
ZerosPerVariable = function(X1) {
D1 = (X1 == 0)
colSums(D1)
}
ZerosPerVariable(Parasite)
#Calculate the number of 0
ZerosPerVariable = function(X1) {
D1 = (X1 == 0) #True if a value is 0
colSums(D1, na.rm = TRUE)
}
ZerosPerVariable(Parasite)
colSums(D1, na.rm = TRUE)
#Combine both functions to give calculation for NA or 0
VariableInfo = function(X1, Choice1) {
if(Choice1 == "Zeros") { D1 = (X1 == 0) }
if(Choice1 == "NAs") { D1 =is.na(X1) }
colSums(D1, na.rm = TRUE)
}
VariableInfo(Parasite, "Zeros")
VariableInfo(Parasite, "NAs")
X1
#Combine both functions to give calculation for NA or 0
VariableInfo = function(X1, Choice1 = "Zeros") { #Default value for Choice1
if(Choice1 == "Zeros") { D1 = (X1 == 0) }
if(Choice1 == "NAs") { D1 =is.na(X1) }
colSums(D1, na.rm = TRUE)
}
VariableInfo(Parasite)
VariableInfo(Parasite, "NAs")
#Print errors
#Combine both functions to give calculation for NA or 0
VariableInfo = function(X1, Choice1 = "Zeros") {
if(Choice1 == "Zeros") { D1 = (X1 == 0) }
if(Choice1 == "NAs") { D1 =is.na(X1) }
if(Choice1 != "Zeros" & Choice1 != "NAs") {
print("You made a typo")
} else {
colSums(D1, na.rm = TRUE)
}
}
VariableInfo(Parasite, "Nas")
#Combine both functions to give calculation for NA or 0
VariableInfo = function(X1, Choice1 = "Zeros") {
ifelse(Choice1 == "Zeros", D1 = (X1 == 0), D1 =is.na(X1) )
if(Choice1 != "Zeros" & Choice1 != "NAs") {
print("You made a typo")
} else {
colSums(D1, na.rm = TRUE)
}
}
VariableInfo(Parasite, "Nas")
#Combine both functions to give calculation for NA or 0
VariableInfo = function(X1, Choice1 = "Zeros") {
D1 = ifelse(Choice1 == "Zeros",  (X1 == 0),  is.na(X1) )
if(Choice1 != "Zeros" & Choice1 != "NAs") {
print("You made a typo")
} else {
colSums(D1, na.rm = TRUE)
}
}
VariableInfo(Parasite, "Nas")
VariableInfo(Parasite, "NAs")
#Combine both functions to give calculation for NA or 0
VariableInfo = function(X1, Choice1 = "Zeros") {
D1 = ifelse(Choice1 == "Zeros",  (X1 == 0),  is.na(X1) )
if(Choice1 != "Zeros" & Choice1 != "NAs") {
print("You made a typo")
} else {
colSums(D1, na.rm = TRUE)
}
}
VariableInfo(Parasite, "NAs")
View(VariableInfo)
VariableInfo(Parasite)
#Combine both functions to give calculation for NA or 0
VariableInfo = function(X1, Choice1 = "Zeros") {
D1 = ifelse(Choice1 == "Zeros",  (X1 == 0),  is.na(X1) )
print(D1)
if(Choice1 != "Zeros" & Choice1 != "NAs") {
print("You made a typo")
} else {
colSums(D1, na.rm = TRUE)
}
}
VariableInfo(Parasite)
#Combine both functions to give calculation for NA or 0
VariableInfo = function(X1, Choice1 = "Zeros") {
ifelse(Choice1 == "Zeros",  D1 = (X1 == 0),  D1 = is.na(X1) )
print(D1)
if(Choice1 != "Zeros" & Choice1 != "NAs") {
print("You made a typo")
} else {
colSums(D1, na.rm = TRUE)
}
}
VariableInfo(Parasite)
Benthic = read.table("RBook/RIKZ.txt", header = TRUE)
names(Benthic)
str(Benthic)
Species = Benthic[, 2:76]
n = dim(Species) #Dimensions of Species
n
#Abundance per site
sum(Species[1, ], na.rm = TRUE)
sum(Species[2, ], na.rm = TRUE)
nrow(Species)
TA = vector(length = n[1])
for (i in 1:n[1]) {
TA[i] = sum(Species[i, ], na.rm = TRUE)
}
for (i in 1:n[1]) {
TA1[i] = sum(Species[i, ], na.rm = TRUE)
}
TA1
TA1 = vector()
for (i in 1:n[1]) {
TA1[i] = sum(Species[i, ], na.rm = TRUE)
}
TA
TA1
#Can also be done using
TA = rowSums(Species, na.rm = TRUE)
TA
#Richness per site
sum(Species[1, ] > 0, na.rm = TRUE)
#Abundance per site
sum(Species[1, ], na.rm = TRUE)
#Richness per site
sum(Species[1, ] > 0, na.rm = TRUE)
sum(Species[1, ] > 0, na.rm = TRUE) #... site 2
sum(Species[2, ] > 0, na.rm = TRUE) #... site 2
Richness = rowSums(Species > 0, na.rm = TRUE)
Richness = vector()
Richness[i] = sum(Species[i, ] > 0, na.rm = TRUE)
for (i in 1:n[1]) {
Richness[i] = sum(Species[i, ] > 0, na.rm = TRUE)
}
Richness = rowSums(Species > 0, na.rm = TRUE)
for (i in 1:n[1]) {
Richness[i] = sum(Species[i, ] > 0, na.rm = TRUE)
}
Richness = rowSums(Species > 0, na.rm = TRUE)
Richness
Richness = vector()
for (i in 1:n[1]) {
Richness[i] = sum(Species[i, ] > 0, na.rm = TRUE)
}
Richness
Richness = rowSums(Species > 0, na.rm = TRUE)
Richness
#Shannon Index per site
RS = rowSums(Species, na.rm = TRUE)
rm(TA1)
prop = Species / RS
View(prop)
View(Species)
View(prop)
View(Species)
H = rowSums(prop * log10(prop), na.rm = TRUE)
H = -rowSums(prop * log10(prop), na.rm = TRUE)
Test = Species * Species
View(Test)
View(Species)
View(Test)
View(Species)
rm(Test)
#Can also be done:
library(vegan)
install.packages("vegan")
#Can also be done:
#vegan must be installed
library(vegan)
T = diversity(Species)
H
T
?diversity
T = diversity(Species, base = exp(10))
H
T
T = diversity(Species, base = 10)
H
T
all.equal(H,T)
#For comparison
all.equal(H,RS)
#For comparison
all.equal(H,RS)
#For comparison
all.equal(H,T)
#Combining Code
Choice = "Richness"
if(Choice == "Richness"){ index = rowSums(Species > 0, na.rm = TRUE) }
if(Choice == "Total Abundance") {index = rowSums(Species, na.rm = TRUE) }
if(Choice == "Shannon") {
RS = rowSums(Species, na.rm = TRUE)
prop = Species / RS #Divide Species[i, j] / RS[i]
index = -rowSums(prop * log10(prop), na.rm = TRUE) #Matrix multiplication and then sum up rows
}
#Put into function
index.function = function(Spec, Choice1) {
if(Choice1 == "Richness"){ index = rowSums(Species > 0, na.rm = TRUE) }
if(Choice1 == "Total Abundance") {index = rowSums(Species, na.rm = TRUE) }
if(Choice1 == "Shannon") {
RS = rowSums(Species, na.rm = TRUE)
prop = Species / RS #Divide Species[i, j] / RS[i]
index = -rowSums(prop * log10(prop), na.rm = TRUE) #Matrix multiplication and then sum up rows
}
list(index = index, MyChoice = Choice1)
}
index.function(Species, "Shannon")
#Put into function
index.function = function(Spec, Choice1) {
if(Choice1 == "Richness"){ index = rowSums(Species > 0, na.rm = TRUE) }
if(Choice1 == "Total Abundance") {index = rowSums(Species, na.rm = TRUE) }
if(Choice1 == "Shannon") {
RS = rowSums(Species, na.rm = TRUE)
prop = Species / RS #Divide Species[i, j] / RS[i]
index = -rowSums(prop * log10(prop), na.rm = TRUE) #Matrix multiplication and then sum up rows
}
list(Index = index, MyChoice = Choice1)
}
index.function(Species, "Shannon")
#Put into function
index.function = function(Spec, Choice1) {
if(Choice1 == "Richness"){ index = rowSums(Species > 0, na.rm = TRUE) }
if(Choice1 == "Total Abundance") {index = rowSums(Species, na.rm = TRUE) }
if(Choice1 == "Shannon") {
RS = rowSums(Species, na.rm = TRUE)
prop = Species / RS #Divide Species[i, j] / RS[i]
index = -rowSums(prop * log10(prop), na.rm = TRUE) #Matrix multiplication and then sum up rows
} else {
print("Check your choice")
Index = NA
}
list(Index = index, MyChoice = Choice1)
}
index.function(Species, "Shannon")
index.function(Species, "Shanon")
index.function(Species, "Shannon")
#Put into function
index.function = function(Spec, Choice1) {
if(Choice1 == "Richness"){ index = rowSums(Spec > 0, na.rm = TRUE) }
if(Choice1 == "Total Abundance") {index = rowSums(Spec, na.rm = TRUE) }
if(Choice1 == "Shannon") {
RS = rowSums(Species, na.rm = TRUE)
prop = Spec / RS #Divide Species[i, j] / RS[i]
index = -rowSums(prop * log10(prop), na.rm = TRUE) #Matrix multiplication and then sum up rows
} else {
print("Check your choice")
Index = NA
}
list(Index = index, MyChoice = Choice1)
}
index.function(Species, "Shannon")
index.function(Species, "Shanon")
index.function(Species, "Shannon")
#setwd("/home/diego/Learning/LearningR") #Laptop
#setwd("/home/valdeslab/Learning/LearningR") #GreenMachine
rm(list = ls()) #clear environment
Benthic = read.table("RBook/RIKZ.txt", header = TRUE)
names(Benthic)
str(Benthic)
Species = Benthic[, 2:76] #Extract species data
TA = rowSums(Species, na.rm = TRUE)
Richness = rowSums(Species > 0, na.rm = TRUE)
#vegan must be installed
library(vegan)
T = diversity(Species, base = 10)
?toupper
toupper(a)
toupper("a")
toupper("A")
?switch
index.function = function(Data, Choice1 = "R") {
Choice1 = toupper(Choice1) #Ensure upper case
switch (Choice1,
"R" = print("Worked")
)
}
index.function("R")
index.function = function(Data, Choice1 = "R") {
Choice1 = toupper(Choice1) #Ensure upper case
switch (Choice1,
"R" = print("Worked"),
"TA" = print("TA")
)
}
index.function("TA")
index.function(Richness, "TA")
index.function = function(Data, Choice1 = "R") {
Choice1 = toupper(Choice1) #Ensure upper case
switch (Choice1,
"R" = (index = rowSums(Data > 0, na.rm = TRUE)),
"TA" = print("TA")
)
}
index.function(Species, "R")
index.function = function(Data, Choice1 = "R") {
Choice1 = toupper(Choice1) #Ensure upper case
switch (Choice1,
"R" = (index = rowSums(Data > 0, na.rm = TRUE)),
"TA" = (index = rowSums(Species, na.rm = TRUE)),
"S" = (index = diversity(Species, base = 10))
)
}
index.function(Species, "R")
index.function(Species, "TA")
index.function(Species, "S")
index.function(Species, "l")
index.function = function(Data, Choice1 = "R") {
Choice1 = toupper(Choice1) #Ensure upper case
switch (Choice1,
"R" = (index = rowSums(Data > 0, na.rm = TRUE)),
"TA" = (index = rowSums(Species, na.rm = TRUE)),
"S" = (index = diversity(Species, base = 10)),
print("Incorrect value added")
)
}
index.function(Species, "l")
index.function(Species, "R")
index.function(Species, "TS")
index.function(Species, "Ta")
index.function(Species, "TA")
index.function(Species, "S")
index.function(Species, "3")
#Improved function from 6.4.7
index.function2 = function(Data, Choice1 = "R") {
Choice1 = toupper(Choice1) #Ensure upper case
switch (Choice1, #Case to check
"R" = (index = rowSums(Data > 0, na.rm = TRUE)),
"TA" = (index = rowSums(Species, na.rm = TRUE)),
"S" = {
RS = rowSums(Species, na.rm = TRUE)
prop = Species / RS #Divide Species[i, j] / RS[i]
H = -rowSums(prop * log10(prop), na.rm = TRUE) #Matrix multiplication and then sum up rows
},
print("Incorrect value added") #Default statement
)
list(Index = index, Choice = Choice1)
}
index.function2(Species, "R")
index.function2(Species, "TA")
index.function2(Species, "S")
#Improved function from 6.4.7
index.function2 = function(Data, Choice1 = "R") {
Choice1 = toupper(Choice1) #Ensure upper case
switch (Choice1, #Case to check
"R" = (index = rowSums(Data > 0, na.rm = TRUE)),
"TA" = (index = rowSums(Species, na.rm = TRUE)),
"S" = {
RS = rowSums(Species, na.rm = TRUE)
prop = Species / RS #Divide Species[i, j] / RS[i]
index = -rowSums(prop * log10(prop), na.rm = TRUE) #Matrix multiplication and then sum up rows
},
print("Incorrect value added") #Default statement
)
list(Index = index, Choice = Choice1)
}
index.function2(Species, "R")
index.function2(Species, "TA")
index.function2(Species, "S")
index.function2(Species, "3")
#Improved function from 6.4.7
index.function = function(Data, Choice1 = "R") {
Choice1 = toupper(Choice1) #Ensure upper case
switch (Choice1, #Case to check
"R" = (index = rowSums(Data > 0, na.rm = TRUE)),
"TA" = (index = rowSums(Data, na.rm = TRUE)),
"S" = (index = diversity(Data, base = 10)),
print("Incorrect value added") #Default statement
)
list(Index = index, Choice = Choice1)
}
index.function(Species, "R")
index.function(Species, "TA")
index.function(Species, "S")
index.function(Species, "3")
#Improved function from 6.4.7
index.function = function(Data, Choice1 = "R") {
Choice1 = toupper(Choice1) #Ensure upper case
index = NA
switch (Choice1, #Case to check
"R" = (index = rowSums(Data > 0, na.rm = TRUE)),
"TA" = (index = rowSums(Data, na.rm = TRUE)),
"S" = (index = diversity(Data, base = 10)),
print("Incorrect value added") #Default statement
)
list(Index = index, Choice = Choice1)
}
index.function(Species, "R")
index.function(Species, "TA")
index.function(Species, "S")
index.function(Species, "3")
#Testing with different method of getting Shannon Index
#Improved function from 6.4.7
index.function2 = function(Data, Choice1 = "R") {
Choice1 = toupper(Choice1) #Ensure upper case
index = NA
switch (Choice1, #Case to check
"R" = (index = rowSums(Data > 0, na.rm = TRUE)),
"TA" = (index = rowSums(Species, na.rm = TRUE)),
# Shannon Index w/o vegan
"S" = {
RS = rowSums(Species, na.rm = TRUE)
prop = Species / RS #Divide Species[i, j] / RS[i]
index = -rowSums(prop * log10(prop), na.rm = TRUE)
},
print("Incorrect value added") #Default statement
)
list(Index = index, Choice = Choice1)
}
#Improved function from 6.4.7
index.function = function(Data, Choice1 = "R") {
Choice1 = toupper(Choice1) #Ensure upper case
index = NA #Value of index in the event of incorrect input
switch (Choice1, #Case to check
"R" = (index = rowSums(Data > 0, na.rm = TRUE)), #Richness
"TA" = (index = rowSums(Data, na.rm = TRUE)), #Total Abundance
"S" = (index = diversity(Data, base = 10)), #Shannon Index
print("Incorrect value added") #Default statement
)
list(Index = index, Choice = Choice1)
}
index.function(Species, "R")
index.function(Species, "TA")
index.function(Species, "S")
index.function(Species, "3")
index.function2(Species, "R")
index.function2(Species, "TA")
index.function2(Species, "S")
index.function2(Species, "3")
