View(pro)
View(pro)
gly <- read.csv("/home/valdeslab/PDB_files/pdb_scripts/sql_scripts/QueryResults/gly_data.csv")
View(gly)
View(gly)
rm(pro)
rm(gly)
gly <- read.csv("/home/valdeslab/PDB_files/pdb_scripts/sql_scripts/QueryResults/gly_data.csv", header = FALSE)
pro <- read.csv("/home/valdeslab/PDB_files/pdb_scripts/sql_scripts/QueryResults/pro_data.csv", header = FALSE)
view(gly)
View(pro)
View(pro)
View(pro.V5)
attach(pro)
View(pro.V5)
View(V5)
plot(V5,V6)
summary(pro)
proPhi = Pro.V5
proPhi = pro.V5
proPhi = V5
proSi = V6
kde2d(proPhi, proSi, h, n = 25, lims = c(range(proPhi), range(proSi)))
library("MASS", lib.loc="/usr/lib/R/library")
kde2d(proPhi, proSi, h, n = 25, lims = c(range(proPhi), range(proSi)))
kde2d(proPhi, proSi, n = 25, lims = c(range(proPhi), range(proSi)))
test = kde2d(proPhi, proSi, n = 25, lims = c(range(proPhi), range(proSi)))
plot(test)
glyPhi - gly.V5
glyPhi = gly.V5
attach(gly)
View(V5)
glyPhi = V5
glyPsi = V6
proPsi = proSi
rm(proSi)
proPhiPsi = kde2d(proPhi, proSi, n = 25, lims = c(range(proPhi), range(proSi)))
glyPhiPsi = kde2d(glyPhi, glyPsi, n = 25, lims = c(range(glyPhi), range(glySi)))
proPhiPsi = kde2d(proPhi, proPsi, n = 25, lims = c(range(proPhi), range(proPsi)))
glyPhiPsi = kde2d(glyPhi, glyPsi, n = 25, lims = c(range(glyPhi), range(glyPsi)))
plot(proPhiPsi)
plot(glyPhiPsi)
rm(list = ls(all = TRUE))
#Clear all variables
rm(list = ls(all = TRUE))
#Quit R
q(save = "yes")
#Citations
citation()
citation(MASS)
#Load a package
library(MASS)
citation(MASS)
citation("MASS")
a = 59
b = 55
c = 53.5
d = 55
e = 52.5
Wing1 = a
Wing2 = b
Wing3 = c
Wing4 = d
Wing5 = e
sqrt(Wing1)
2 * Wing1
Wing1 + Wing2
Wing1 + Wing2 + Wing3 + Wing4 + Wing5
(Wing1 + Wing2 + Wing3 + Wing4 + Wing5)/5
SQ.wing1 = sqrt(Wing1)
mul.w1 = 2 * Wing1
Sum.12 = Wing1 + Wing2
SUM12345 = Wing1 + Wing2 + Wing3 + Wing4 + Wing5
Av = (Wing1 + Wing2 + Wing3 + Wing4 + Wing5)/5
#Brackets to show value
(SQ.wing2 = sqrt(Wing2))
#Concatenate values with c()
Wingcrd = c(a,b,c,d,e, 57.5, 53, 55)
Wingcrd
#Access data just like array
Wingcrd[1]
Wingcrd[2]
Wingcrd[0]
#Display a range
Wingcrd[1 : 5]
#Display all except second value
Wingcrd[-2]
Wingcrd[-2 : -5]
#Add all values
sum(Wingcrd)
s.win = sum(Wingcrd)
sum(Wingcrd)
s.win = sum(Wingcrd)
s.exclude = sum(Wingcrd[-2: -6])
s.win
s.exclude
#Test data
Tarsus <- c(22.3, 19.7, 20.8, 20.3, 20.8, 21.5, 20.6, 21.5)
Head <- c(31.2, 30.4, 30.6, 30.3, 30.3, 30.8, 32.5, NA)
Wt <- c(9.5, 13.8, 14.8, 15.2, 15.5, 15.6, 15.6, 15.7)
sum(Head)
?sum
sum(Head, na.rm = TRUE)
?sum #Read documentation to solve
#Combining variables
BirdData = c(Wingcrd, Tarsus, Head, Wt)
BirdData
Id <- c(1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4)
Id
#repeat()
Id = rep(c(1, 2, 3, 4), each = 8)
#And simplified using a range
Id = rep(1 : 4, each = 8)
Id <- c(1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4)
Id
#repeat()
#Produces the same vector as above
Id = rep(c(1, 2, 3, 4), each = 8)
Id
#And simplified using a range
Id = rep(1 : 4, each = 8)
Id
#Produces a sequence
a = seq(from = 1, to = 4, by = 1)
a
#combine the two
a = seq(from = 1, to = 4, by = 1)
a
a = rep(a, each = 8)
a
VarNames = c("Wingcrd", "Tarsus", "Head", "Wt")
VarNames
Id2 = rep(VarNames, each = 8)
Id2
Id2NoEach = rep(VarNames, 8)
Id2NoEach
?rep
#cbind()
#Contains original varibles in columns
Z = cbind(Wingcrd, Tarsus, Head, Wt)
Z
Wingcrd
Z = cbind(Wingcrd, Tarsus, Head, Wt)
Z
#Access n column
Z[ , 1]
Z[ , 1] #column 1
Z[1:8, 1] #column 1
Z[2, ] #row 2
Z[2, 1:4] #row2
#Experiments with access
Z[1, 1] #row 1, column 1
Z[ , 2:3] #column 2 and 3
X = Z[4, 4] #row4, column4
X
X = Z[4, 4] #row4, column4
X
Y = Z[ , 4] #column 4
Y
Z
W = Z[ , -3] #exclude column 3
W
D = Z[ , c(1, 3, 4)] #column 1, 3, 4
D
E = Z [ , c(-1, -3)] #exclude column 1 and 3
E
#dimensions of Z
dim(Z)
(nrow = dim(z)[1])
(nrow = dim(Z)[1])
(ncol = dim(Z)[2])
?nrow
nrow(Z)
nrow
rm(nrow)
rm(ncol)
Zrow = nrow(Z)
Zcol = ncol(Z)
Zrow
Zcol
#rbind()
#Arrange var in rows
Z2 = rbind(Wingcrd, Tarsus, Head, Wt)
Z2
?edit
?fix
#vector()
#Create a vector...yay!
W = vector(length = 8)
W #Will return FALSE
W[1] = 59
W[2] = 55
W[3] = 53.5
W[4] = 55
W[5] = 52.5
W[6] = 57.5
W[7] = 53
W[8] = 55
W
W[1]
W[1:4]
W[2:6]
W[-2]
W[c(1,2,3)]
q()
#setwd("/home/diego/Learning/LearningR") #Laptop
#setwd("/home/valdeslab/Learning/LearningR") #GreenMachine
rm(list = ls()) #clear environment
Owls = read.table(file = "RBook/Owls.txt", header = TRUE)
names(Owls)
#setwd("/home/diego/Learning/LearningR") #Laptop
setwd("/home/valdeslab/Learning/LearningR") #GreenMachine
Owls = read.table(file = "RBook/Owls.txt", header = TRUE)
names(Owls)
str(Owls)
Owls$LogNestling =  log10(1 + Owls$SiblingNegotiation) #Add 1 to get rid of 0s then get log10
plot(Owls$LogNestling, Owls$ArrivalTime,
xlab = "Nestling", ylab = "Arrival Time")
#Clears all plots
clear = function() {
if (!is.null(dev.list())) dev.off()
}
#Number of NA values
naValues = function(X1) {
colSums(is.na(X1))
}
#Remove rows with NA
removeNa = function(X1) {
X1[complete.cases(X1), ] #Remove rows that have a na value
}
rm(list = ls()) #clear environment
Benthic = read.table("RBook/RIKZ2.txt", header = TRUE)
Benthic$fBeach = factor(Benthic$Beach) #Create a factor column
#Identifying Points
plot(y = Benthic$Richness, x = Benthic$NAP,
xlab = "Mean high tide (m)", ylab = "Species richness",
main = "Benthic Data")
identify(y = Benthic$Richness, x = Benthic$NAP)
clear()
#Clears all plots
clear = function() {
if (!is.null(dev.list())) dev.off()
}
#Number of NA values
naValues = function(X1) {
colSums(is.na(X1))
}
#Remove rows with NA
removeNa = function(X1) {
X1[complete.cases(X1), ] #Remove rows that have a na value
}
clear()
#Identifying Points
plot(y = Benthic$Richness, x = Benthic$NAP,
xlab = "Mean high tide (m)", ylab = "Species richness",
main = "Benthic Data")
identify(y = Benthic$Richness, x = Benthic$NAP)
identify(y = Benthic$Richness, x = Benthic$NAP)
#Fonts and font size
windowsFonts()
#Fonts and font size
windowsFonts()
#Fonts and font size
title("Bird abundance", cex.main = 2,
family = "serif", font.main = 1)
#Identifying Points
plot(y = Benthic$Richness, x = Benthic$NAP,
xlab = "Mean high tide (m)", ylab = "Species richness",
main = "Benthic Data")
identify(y = Benthic$Richness, x = Benthic$NAP) #Can be used to give a character label
#Fonts and font size
title("Bird abundance", cex.main = 2,
family = "serif", font.main = 1)
Birds = read.table("RBook/loyn.txt", header = TRUE)
names(Birds)
str(Birds)
Birds$LOGAREA = log10(Birds$AREA) #Create col of log10 values
Birds$fGRAZE = factor(Birds$GRAZE)
plot(Birds$LOGAREA, Birds$ABUND,
xlab = "Log transformed Area", ylab = "Bird abundance")
#Fonts and font size
title("Bird abundance", cex.main = 2,
family = "serif", font.main = 1)
#Fonts and font size
title("Bird abundance", cex.main = 2,
family = "serif", font.main = 2) #Add a title to current plot
#Special characters
demo(plotmath)
Whales = read.table("RBook/TeethNitrogen.txt", header = TRUE)
source('~/Learning/LearningR/ch_7_data.r', echo=TRUE)
Whales = read.table("RBook/TeethNitrogen.txt", header = TRUE)
str(Whales)
names(Whales)
N.Moby = Whales$X15N[Whales$Tooth == "Moby"]
Age.Moby = Whales$Age[Whales$Tooth == "Moby"]
plot(x = Age.Moby, y = N.Moby, xlab = "Age",
ylab = expression(paste(delta^{15}, "N")))
rm(list = ls()) #clear environment
#Clears all plots
clear = function() {
if (!is.null(dev.list())) dev.off()
}
#Number of NA values
naValues = function(X1) {
colSums(is.na(X1))
}
#Remove rows with NA
removeNa = function(X1) {
X1[complete.cases(X1), ] #Remove rows that have a na value
}
clear()
#Pairplot
Benthic = read.table("RIKZ2.txt", header = TRUE)
#Pairplot
Benthic = read.table("RBook/RIKZ2.txt", header = TRUE)
pairs(Benthic[ , 2:9])
?pairs
pairs(Benthic[, 2:9], diag.panel = panel.hist,
upper.panel = panel.smooth,
lower.panel = panel.cor)
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)
}
pairs(USJudgeRatings[1:5], panel = panel.smooth,
cex = 1.5, pch = 24, bg = "light blue",
diag.panel = panel.hist, cex.labels = 2, font.labels = 2)
## put (absolute) correlations on the upper panels,
## with size proportional to the correlations.
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs(Benthic[, 2:9], diag.panel = panel.hist,
upper.panel = panel.smooth,
lower.panel = panel.cor)
Veg = read.table(file = "RBook/Vegetation2.txt", header = TRUE)
names(Veg)
str(Veg)
names(Veg)
View(Veg)
pairs(Veg, diag.panel = panel.hist, upper.panel = panel.smooth, lower.panel = panel.cor)
pairs(Veg[, 9:21], diag.panel = panel.hist, upper.panel = panel.smooth, lower.panel = panel.cor)
pairs(Veg[, 9:15], diag.panel = panel.hist, upper.panel = panel.smooth, lower.panel = panel.cor)
pairs(Veg[, 9:13], diag.panel = panel.hist, upper.panel = panel.smooth, lower.panel = panel.cor)
pairs(Veg[, 14:21], diag.panel = panel.hist, upper.panel = panel.smooth, lower.panel = panel.cor)
pairs(Veg[, 9:13 & 22:24], diag.panel = panel.hist, upper.panel = panel.smooth, lower.panel = panel.cor)
col = c(9,10,11,12,13,22,23,24)
pairs(Veg[, col], diag.panel = panel.hist, upper.panel = panel.smooth, lower.panel = panel.cor)
clear()
pairs(Veg[, 9:13], diag.panel = panel.hist, upper.panel = panel.smooth, lower.panel = panel.cor)
pairs(Veg[, 14:21], diag.panel = panel.hist, upper.panel = panel.smooth, lower.panel = panel.cor)
pairs(Veg[, col], diag.panel = panel.hist, upper.panel = panel.smooth, lower.panel = panel.cor)
clear
clear()
#Coplot
Benthic = read.table("RBook/RIKZ2.txt", header = TRUE)
coplot(Richness ~ NAP | as.factor(Beach), pch = 19, data = Benthic)
coplot(Richness ~ NAP | grainsize, pch = 19, data = Benthic)
points(x, y, ...)}
panel.lm = function(x, y, ...) {
tmp <- lm(y ~ x, na.action = na.omit)
abline(tmp)
points(x, y, ...)
}
coplot(Richness ~ NAP | as.factor(Beach), pch = 19, panel = panel.lm, data = Benthic)
#ex10
#Plot species richness versus a covariate of your choice conditional ontransect.
Veg = read.table(file = "RBook/Vegetation2.txt", header = TRUE)
str(Veg)
unique(Veg$Transect)
names(Veg)
coplot(R ~ BARESOIL | as.factor(Transect), pch = 19, data = Veg)
#Using more than one variable
pHEire = read.table("RBook/SDI2003.txt", header = TRUE)
pHEire$LOGAlt = log10(pHEire$Altitude)
names(pHEire)
str(pHEire)
pHEire$fForested = factor(pHEire$Forested)
str(pHEire)
coplot(pH ~ SDI | LOGAlt * fForested,
panel = panel.lm, data = pHEire)
coplot(pH ~ SDI | LOGAlt * fForested,
panel = panel.lm, data = pHEire, number = 2)
coplot(pH ~ SDI | LOGAlt * fForested,
panel = panel.lm, data = pHEire, number = 4) #Limits the number of conditioning intervals
coplot(pH ~ SDI | LOGAlt * fForested,
panel = panel.lm, data = pHEire, number = 2) #Limits the number of conditioning intervals
coplot(pH ~ SDI | LOGAlt * fForested,
panel = panel.lm, data = pHEire)
coplot(pH ~ SDI | LOGAlt,
panel = panel.lm, data = pHEire)
pHEire$Temp2.num = as.numeric(cut(pHEire$Temperature, breaks = 2))
View(pHEire)
coplot(pH ~ SDI | LOGAlt * fForested,
panel = panel.lm, data = pHEire,
number = 3, cex = 1.5, pch = 19,
col = gray(pHEire$Temp2.num /3))
coplot(pH ~ SDI | LOGAlt * fForested,
panel = panel.lm, data = pHEire,
number = 3, cex = 1.5, pch = 19,
col = rainbow(pHEire$Temp2.num /3))
coplot(pH ~ SDI | LOGAlt * fForested,
panel = panel.lm, data = pHEire,
number = 3, cex = 1.5, pch = 19,
col = grey(pHEire$Temp2.num /3))
coplot(pH ~ SDI | LOGAlt * fForested,
panel = panel.lm, data = pHEire,
number = 3, cex = 1.5, pch = 19,
col = grey(pHEire$Temp2.num))
coplot(pH ~ SDI | LOGAlt * fForested,
panel = panel.lm, data = pHEire,
number = 3, cex = 1.5, pch = 19,
col = grey(pHEire$Temp2.num / 3))
coplot(pH ~ SDI | LOGAlt * fForested,
panel = panel.lm, data = pHEire,
number = 3, cex = 1.5, pch = 19,
col = pHEire$Temp2.num)
coplot(pH ~ SDI | LOGAlt * fForested,
panel = panel.lm, data = pHEire,
number = 3, cex = 1.5, pch = 19,
col = grey(pHEire$Temp2.num / 3))
#Combining plots
MyLayOut <- matrix(c(2, 0, 1, 3), nrow = 2, ncol=2, byrow = TRUE)
#Combining plots
MyLayOut = matrix(c(2, 0, 1, 3), nrow = 2, ncol=2, byrow = TRUE)
View(Benthic)
View(MyLayOut)
MyLayOut
nf = layout(mat = MyLayOut, widths = c(3, 1), heights = c(1, 3), respect = TRUE)
layout.show(nf)
xrange = c(min(Benthic$NAP), max(Benthic$NAP))
yrange = c(min(Benthic$Richness), max(Benthic$Richness))
#First graph
par(mar = c(4,4,2,2))
plot(Benthic$NAP, Benthic$Richness,
xlim = xrange, ylim = yrange,
xlab = "NAP", ylab = "Richness")
#Second graph
par(mar = c(0,3,1,1))
boxplot(Benthic$NAP, horizontal = TRUE, axes = FALSE,
frame.plot = false, ylim = xrange, space = 0)
boxplot(Benthic$NAP, horizontal = TRUE, axes = FALSE,
frame.plot = FALSE, ylim = xrange, space = 0)
#Third graph
par(mar = c(3,0,1,1))
boxplot(Benthic$Richness, axes = FALSE,
ylim = yrange, space = 0, horiz = TRUE)
plot(Benthic$NAP, Benthic$Richness,
xlim = xrange, ylim = yrange,
xlab = "NAP", ylab = "Richness")
#Second graph
par(mar = c(0,3,1,1))
boxplot(Benthic$NAP, horizontal = TRUE, axes = FALSE,
frame.plot = FALSE, ylim = xrange, space = 0)
#Third graph
par(mar = c(3,0,1,1))
boxplot(Benthic$Richness, axes = FALSE,
ylim = yrange, space = 0, horiz = TRUE)
coplot(pH ~ SDI | LOGAlt * fForested,
panel = panel.lm, data = pHEire)
#Just for some comparisons
coplot(pH ~ SDI | LOGAlt * fForested,
panel = panel.lm, data = pHEire, number = 2) #Limits the number of conditioning intervals
coplot(pH ~ SDI | LOGAlt,
panel = panel.lm, data = pHEire)
#Adding color
pHEire$Temp2.num = as.numeric(cut(pHEire$Temperature, breaks = 2)) #seperate data into two regimes and turn to number
coplot(pH ~ SDI | LOGAlt * fForested,
panel = panel.lm, data = pHEire,
number = 3, cex = 1.5, pch = 19,
col = grey(pHEire$Temp2.num / 3)) #col = pHEire$Temp2.num #Produce red and black dots
plot(Benthic$NAP, Benthic$Richness,
xlim = xrange, ylim = yrange,
xlab = "NAP", ylab = "Richness")
#Third graph
par(mar = c(3,0,1,1))
boxplot(Benthic$Richness, axes = FALSE,
ylim = yrange, space = 0, horiz = TRUE)
boxplot(Benthic$NAP, horizontal = TRUE, axes = FALSE,
frame.plot = FALSE, ylim = xrange, space = 0)
clear()
#Combining plots
MyLayOut = matrix(c(2, 0, 1, 3), nrow = 2, ncol=2, byrow = TRUE) #Create matrix as template for plot locations
MyLayOut
nf = layout(mat = MyLayOut, widths = c(3, 1), heights = c(1, 3), respect = TRUE) #specify col widths and row heights
layout.show(nf) #Show the created layout
xrange = c(min(Benthic$NAP), max(Benthic$NAP))
yrange = c(min(Benthic$Richness), max(Benthic$Richness))
#First graph
par(mar = c(4,4,2,2))
par(mar = c(0,0,2,2))
plot(Benthic$NAP, Benthic$Richness,
xlim = xrange, ylim = yrange,
xlab = "NAP", ylab = "Richness")
#First graph
par(mar = c(4,4,2,2))
plot(Benthic$NAP, Benthic$Richness,
xlim = xrange, ylim = yrange,
xlab = "NAP", ylab = "Richness")
clear
