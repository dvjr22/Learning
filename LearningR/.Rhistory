pro <- read.csv("/home/valdeslab/PDB_files/pdb_scripts/sql_scripts/QueryResults/pro_data.csv")
View(pro)
View(pro)
gly <- read.csv("/home/valdeslab/PDB_files/pdb_scripts/sql_scripts/QueryResults/gly_data.csv")
View(gly)
View(gly)
rm(pro)
rm(gly)
gly <- read.csv("/home/valdeslab/PDB_files/pdb_scripts/sql_scripts/QueryResults/gly_data.csv", header = FALSE)
pro <- read.csv("/home/valdeslab/PDB_files/pdb_scripts/sql_scripts/QueryResults/pro_data.csv", header = FALSE)
view(gly)
View(pro)
View(pro)
View(pro.V5)
attach(pro)
View(pro.V5)
View(V5)
plot(V5,V6)
summary(pro)
proPhi = Pro.V5
proPhi = pro.V5
proPhi = V5
proSi = V6
kde2d(proPhi, proSi, h, n = 25, lims = c(range(proPhi), range(proSi)))
library("MASS", lib.loc="/usr/lib/R/library")
kde2d(proPhi, proSi, h, n = 25, lims = c(range(proPhi), range(proSi)))
kde2d(proPhi, proSi, n = 25, lims = c(range(proPhi), range(proSi)))
test = kde2d(proPhi, proSi, n = 25, lims = c(range(proPhi), range(proSi)))
plot(test)
glyPhi - gly.V5
glyPhi = gly.V5
attach(gly)
View(V5)
glyPhi = V5
glyPsi = V6
proPsi = proSi
rm(proSi)
proPhiPsi = kde2d(proPhi, proSi, n = 25, lims = c(range(proPhi), range(proSi)))
glyPhiPsi = kde2d(glyPhi, glyPsi, n = 25, lims = c(range(glyPhi), range(glySi)))
proPhiPsi = kde2d(proPhi, proPsi, n = 25, lims = c(range(proPhi), range(proPsi)))
glyPhiPsi = kde2d(glyPhi, glyPsi, n = 25, lims = c(range(glyPhi), range(glyPsi)))
plot(proPhiPsi)
plot(glyPhiPsi)
rm(list = ls(all = TRUE))
#Clear all variables
rm(list = ls(all = TRUE))
#Quit R
q(save = "yes")
#Citations
citation()
citation(MASS)
#Load a package
library(MASS)
citation(MASS)
citation("MASS")
a = 59
b = 55
c = 53.5
d = 55
e = 52.5
Wing1 = a
Wing2 = b
Wing3 = c
Wing4 = d
Wing5 = e
sqrt(Wing1)
2 * Wing1
Wing1 + Wing2
Wing1 + Wing2 + Wing3 + Wing4 + Wing5
(Wing1 + Wing2 + Wing3 + Wing4 + Wing5)/5
SQ.wing1 = sqrt(Wing1)
mul.w1 = 2 * Wing1
Sum.12 = Wing1 + Wing2
SUM12345 = Wing1 + Wing2 + Wing3 + Wing4 + Wing5
Av = (Wing1 + Wing2 + Wing3 + Wing4 + Wing5)/5
#Brackets to show value
(SQ.wing2 = sqrt(Wing2))
#Concatenate values with c()
Wingcrd = c(a,b,c,d,e, 57.5, 53, 55)
Wingcrd
#Access data just like array
Wingcrd[1]
Wingcrd[2]
Wingcrd[0]
#Display a range
Wingcrd[1 : 5]
#Display all except second value
Wingcrd[-2]
Wingcrd[-2 : -5]
#Add all values
sum(Wingcrd)
s.win = sum(Wingcrd)
sum(Wingcrd)
s.win = sum(Wingcrd)
s.exclude = sum(Wingcrd[-2: -6])
s.win
s.exclude
#Test data
Tarsus <- c(22.3, 19.7, 20.8, 20.3, 20.8, 21.5, 20.6, 21.5)
Head <- c(31.2, 30.4, 30.6, 30.3, 30.3, 30.8, 32.5, NA)
Wt <- c(9.5, 13.8, 14.8, 15.2, 15.5, 15.6, 15.6, 15.7)
sum(Head)
?sum
sum(Head, na.rm = TRUE)
?sum #Read documentation to solve
#Combining variables
BirdData = c(Wingcrd, Tarsus, Head, Wt)
BirdData
Id <- c(1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4)
Id
#repeat()
Id = rep(c(1, 2, 3, 4), each = 8)
#And simplified using a range
Id = rep(1 : 4, each = 8)
Id <- c(1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4)
Id
#repeat()
#Produces the same vector as above
Id = rep(c(1, 2, 3, 4), each = 8)
Id
#And simplified using a range
Id = rep(1 : 4, each = 8)
Id
#Produces a sequence
a = seq(from = 1, to = 4, by = 1)
a
#combine the two
a = seq(from = 1, to = 4, by = 1)
a
a = rep(a, each = 8)
a
VarNames = c("Wingcrd", "Tarsus", "Head", "Wt")
VarNames
Id2 = rep(VarNames, each = 8)
Id2
Id2NoEach = rep(VarNames, 8)
Id2NoEach
?rep
#cbind()
#Contains original varibles in columns
Z = cbind(Wingcrd, Tarsus, Head, Wt)
Z
Wingcrd
Z = cbind(Wingcrd, Tarsus, Head, Wt)
Z
#Access n column
Z[ , 1]
Z[ , 1] #column 1
Z[1:8, 1] #column 1
Z[2, ] #row 2
Z[2, 1:4] #row2
#Experiments with access
Z[1, 1] #row 1, column 1
Z[ , 2:3] #column 2 and 3
X = Z[4, 4] #row4, column4
X
X = Z[4, 4] #row4, column4
X
Y = Z[ , 4] #column 4
Y
Z
W = Z[ , -3] #exclude column 3
W
D = Z[ , c(1, 3, 4)] #column 1, 3, 4
D
E = Z [ , c(-1, -3)] #exclude column 1 and 3
E
#dimensions of Z
dim(Z)
(nrow = dim(z)[1])
(nrow = dim(Z)[1])
(ncol = dim(Z)[2])
?nrow
nrow(Z)
nrow
rm(nrow)
rm(ncol)
Zrow = nrow(Z)
Zcol = ncol(Z)
Zrow
Zcol
#rbind()
#Arrange var in rows
Z2 = rbind(Wingcrd, Tarsus, Head, Wt)
Z2
?edit
?fix
#vector()
#Create a vector...yay!
W = vector(length = 8)
W #Will return FALSE
W[1] = 59
W[2] = 55
W[3] = 53.5
W[4] = 55
W[5] = 52.5
W[6] = 57.5
W[7] = 53
W[8] = 55
W
W[1]
W[1:4]
W[2:6]
W[-2]
W[c(1,2,3)]
q()
#setwd("/home/diego/Learning/LearningR") #Laptop
#setwd("/home/valdeslab/Learning/LearningR") #GreenMachine
rm(list = ls()) #clear environment
setwd("/home/valdeslab/Learning/LearningR")
Amphibian = read.table("RBook/Amphibian_road_Kills.csv", header = TRUE, sep = ",")
str(Amphibian)
names(Amphibian)
plot(x = Amphibian$TOT.N,
y = Amphibian$D.PARK,
xlab = "Dead Animals",
ylab = "Olives on Site",
main = "Chart",
cex = Size)
Amphibian$Size = Amphibian$OLIVE
Ambhibian
Amphibian
view(Amphibian)
View(Amphibian)
Amphibian$Size = Amphibian$OLIVE/10
Ambibian$Size[Ambibian$Size < 2 ] = 1
Amphibian$Size[Amphibian$Size < 2 ] = 1
Amphibian$Size[Amphibian$Size > 2 & Size < 4] = 2
Amphibian$Size[Amphibian$Size > 2 & Amphibian$Size < 4] = 2
str(Amphibian)
names(Amphibian)
Amphibian$Size = Amphibian$OLIVE/10
Amphibian$Size[Amphibian$Size < 2 ] = 1
Amphibian$Size[Amphibian$Size > 2 & Amphibian$Size < 4] = 2
Amphibian$Size[Amphibian$Size > 4 ] = 3
plot(x = Amphibian$TOT.N,
y = Amphibian$D.PARK,
xlab = "Dead Animals",
ylab = "Olives on Site",
main = "Chart",
cex = Size)
plot(x = Amphibian$TOT.N,
y = Amphibian$D.PARK,
xlab = "Dead Animals",
ylab = "Olives on Site",
main = "Chart",
cex = Amphibian$Size)
plot(x = Amphibian$D.PARK,
y = Amphibian$TOT.N,
xlab = "Dead Animals",
ylab = "Olives on Site",
main = "Chart",
cex = Amphibian$Size)
Loess = loess(Amphibian$D.PARK ~ Amphibian$TOT.N, data = Amphibian)
Fit = fitted(Loess)
lines(Amphibian$D.PARK, Fit)
Loess = loess(Amphibian$TOT.N ~ Amphibian$D.PARK, data = Amphibian)
Fit = fitted(Loess)
lines(Amphibian$D.PARK, Fit)
#Part2
Flu = read.table("RBook/BirdFluDeaths.txt", header = True, sep = ",")
#Part2
Flu = read.table("RBook/BirdFluDeaths.txt", header = TRUE, sep = ",")
#Part2
Flu = read.table("RBook/BirdFluDeaths.txt", header = TRUE)
?read.table
#Part2
Flu = read.table("RBook/BirdFluDeaths.txt", header = TRUE, check.names = FALSE)
str(Flu)
names(Flu)
names(Flu[8] = paste(Indonesia))
colnames(Flu)
?colnames
titles = colnames(Flu)
titles
titles[8] = 'Indonesia'
Titles
titles
colnames(Flu) = titles
colnames(Flu)
FluTest = read.delim("RBook/BirdFluDeaths.txt", header = TRUE)
FluTest = read.delim("RBook/BirdFluDeaths.txt", header = TRUE, check.names = FALSE)
names(FluTest)
str(Flu)
View(Flu)
View(Flu)
Deaths03 = rowsum(Flu)
Deaths03 = rowsum(Flu[1,])
Deaths = rowsum(Flu[ , 2:16])
?rowsum
Deaths = rowSums(Flu[ , 2:16])
Deaths
pie(Deaths, main = "Deaths by year",
col = gray(seq(0.4, 1.0, length = 6))
)
DeathsYear = rowSums(Flu[ , 2:16])
pie(DeathsYear, main = "Deaths by year",
col = gray(seq(0.4, 1.0, length = 6))
)
DeathsCountry = colSums(Flu[1:6,])
DeathsCountry
DeathsCountry = colSums(Flu[1:6, 2:16])
DeathsCountry
pie(DeathsCountry, col = rainbow(6), clockwise = TRUE, main = "Deaths by Country")
DeathsYear
colnames(DeathsYear) = c(2003,2004,2005,2006,2007,2008)
rownames(DeathsYear) = c(2003,2004,2005,2006,2007,2008)
?pie
names(DeathsYear) = c(2003,2004,2005,2006,2007,2008)
pie(DeathsYear, main = "Deaths by year",
col = gray(seq(0.4, 1.0, length = 6))
)
op = par(mfrow = c(2,2))
DeathsYear = rowSums(Flu[ , 2:16])
names(DeathsYear) = c(2003,2004,2005,2006,2007,2008)
pie(DeathsYear, main = "Deaths by year",
col = gray(seq(0.4, 1.0, length = 6))
)
DeathsCountry = colSums(Flu[1:6, 2:16])
pie(DeathsCountry, col = rainbow(6), clockwise = TRUE, main = "Deaths by Country")
par(op)
op = par(mfrow = c(1,2))
DeathsYear = rowSums(Flu[ , 2:16])
names(DeathsYear) = c(2003,2004,2005,2006,2007,2008)
pie(DeathsYear, main = "Deaths by year",
col = gray(seq(0.4, 1.0, length = 6))
)
DeathsCountry = colSums(Flu[1:6, 2:16])
pie(DeathsCountry, col = rainbow(6), clockwise = TRUE, main = "Deaths by Country")
data("iris")
#part3
data("iris")
DeathsCountry = colSums(Flu[, 2:16])
pie(DeathsCountry, col = rainbow(6), clockwise = TRUE, main = "Deaths by Country")
str(iris)
names(iris)
max(iris$Sepal.Length)
MinL = min(iris$Sepal.Length)
MaxSl = max(iris$Sepal.Length)
MinSl = min(iris$Sepal.Length)
MaxPl = max(iris$Sepal.Length)
MinPl = min(iris$Sepal.Width)
str(iris$Sepal.Length)
str(iris)
unique(iris$Species)
One = iris$Sepal.Length[iris$Species == 1]
One
One = iris$Sepal.Length[iris$Species == 'setosa']
One
Setosa = iris$Sepal.Length[iris$Species == 'setosa']
unique(iris$Species)
Setosa = iris$Sepal.Length[iris$Species == 'setosa']
Versicolor = iris$Sepal.Length[iris$Species == 'versicolor']
Virginica = iris$Sepal.Length[iris$Species == 'virginica']
par(op)
pie(DeathsYear, main = "Deaths by year",
col = gray(seq(0.4, 1.0, length = 6))
)
par(op)
plot(x = Amphibian$D.PARK,
y = Amphibian$TOT.N,
xlab = "Dead Animals",
ylab = "Olives on Site",
main = "Chart",
cex = Amphibian$Size)
plot(x = Amphibian$D.PARK,
y = Amphibian$TOT.N,
xlab = "Dead Animals",
ylab = "Olives on Site",
main = "Chart",
cex = Amphibian$Size,
col = Amphibian$Size)
?barplot
Data = cbind(Setosa, Versicolor, Virginica)
Data
barplot(Data)
hist(Data)
hist(Setosa)
par(mfrow=c(1,3))
plotSet <-hist(Setosa, col="blue", xlim=c(4, 8), ylim=c(0,14), breaks=seq(4, 8, 0.2))
plotVer <- hist(Veriscolor, col="yellow", xlim=c(4, 8), ylim=c(0,14), breaks=seq(4, 8, 0.2))
plotVer <- hist(Versicolor, col="yellow", xlim=c(4, 8), ylim=c(0,14), breaks=seq(4, 8, 0.2))
plotVir <- hist(Virginica, col="red", xlim=c(4, 8), ylim=c(0,14), breaks=seq(4, 8, 0.2))
#Part2
Flu = read.table("RBook/BirdFluDeaths.txt", header = TRUE, check.names = FALSE)
str(Flu)
names(Flu)
op = par(mfrow = c(1,2))
DeathsYear = rowSums(Flu[ , 2:16])
names(DeathsYear) = c(2003,2004,2005,2006,2007,2008)
pie(DeathsYear, main = "Deaths by year",
col = gray(seq(0.4, 1.0, length = 6))
)
DeathsCountry = colSums(Flu[, 2:16])
pie(DeathsCountry, col = rainbow(6), clockwise = TRUE, main = "Deaths by Country")
#Part2
Flu = read.table("RBook/BirdFluDeaths.txt", header = TRUE, check.names = FALSE)
str(Flu)
names(Flu)
titles = colnames(Flu)
titles[8] = 'Indonesia'
colnames(Flu) = titles
op = par(mfrow = c(1,2))
DeathsYear = rowSums(Flu[ , 2:16])
names(DeathsYear) = c(2003,2004,2005,2006,2007,2008)
pie(DeathsYear, main = "Deaths by year",
col = gray(seq(0.4, 1.0, length = 6))
)
DeathsCountry = colSums(Flu[, 2:16])
pie(DeathsCountry, col = rainbow(6), clockwise = TRUE, main = "Deaths by Country")
par(op)
#part3
data("iris")
str(iris)
names(iris)
MaxSl = max(iris$Sepal.Length)
MinSl = min(iris$Sepal.Length)
MaxPl = max(iris$Sepal.Length)
MinPl = min(iris$Sepal.Width)
str(iris$Sepal.Length)
unique(iris$Species)
Setosa = iris$Sepal.Length[iris$Species == 'setosa']
Versicolor = iris$Sepal.Length[iris$Species == 'versicolor']
Virginica = iris$Sepal.Length[iris$Species == 'virginica']
par(mfrow=c(1,3))
plotSet <-hist(Setosa, col="blue", xlim=c(4, 8), ylim=c(0,14), breaks=seq(4, 8, 0.2))
plotVer <- hist(Versicolor, col="yellow", xlim=c(4, 8), ylim=c(0,14), breaks=seq(4, 8, 0.2))
plotVir <- hist(Virginica, col="red", xlim=c(4, 8), ylim=c(0,14), breaks=seq(4, 8, 0.2))
plot(x = Amphibian$D.PARK,
y = Amphibian$TOT.N,
xlab = "Dead Animals",
ylab = "Olives on Site",
main = "Chart",
cex = Amphibian$Size,
col = Amphibian$Size)
par()
plot(x = Amphibian$D.PARK,
y = Amphibian$TOT.N,
xlab = "Dead Animals",
ylab = "Olives on Site",
main = "Chart",
cex = Amphibian$Size,
col = Amphibian$Size)
Loess = loess(Amphibian$TOT.N ~ Amphibian$D.PARK, data = Amphibian)
Fit = fitted(Loess)
lines(Amphibian$D.PARK, Fit)
plot(x = Amphibian$D.PARK,
y = Amphibian$TOT.N,
xlab = "Dead Animals",
ylab = "Olives on Site",
main = "Chart",
col = Amphibian$Size)
plot(x = Amphibian$D.PARK,
y = Amphibian$TOT.N,
xlab = "Dead Animals",
ylab = "Olives on Site",
main = "Chart",
cex = Amphibian$Size,
col = Amphibian$Size)
Loess = loess(Amphibian$TOT.N ~ Amphibian$D.PARK)
Fit = fitted(Loess)
lines(Amphibian$D.PARK, Fit)
?order
order(Amphibian$D.PARK)
Order1 = order(Amphibian$D.PARK)
lines(Order1, Fit)
plot(x = Amphibian$D.PARK,
y = Amphibian$TOT.N,
xlab = "Dead Animals",
ylab = "Olives on Site",
main = "Chart",
cex = Amphibian$Size,
col = Amphibian$Size)
Loess = loess(Amphibian$TOT.N ~ Amphibian$D.PARK)
Fit = fitted(Loess)
lines(Order1, Fit)
Amphibian$D.PARK
Order1
lines(Amphibian[Order1], Fit)
lines(Amphibian$D.PARK[Order1], Fit)
Order1 = order(Amphibian$D.PARK)
lines(Amphibian$D.PARK[Order1], Fit)
plot(x = Amphibian$D.PARK,
y = Amphibian$TOT.N,
xlab = "Dead Animals",
ylab = "Olives on Site",
main = "Chart",
cex = Amphibian$Size,
col = Amphibian$Size)
Loess = loess(Amphibian$TOT.N ~ Amphibian$D.PARK)
Fit = fitted(Loess)
Order1 = order(Amphibian$D.PARK) # vector of D.Park in accending order
lines(Amphibian$D.PARK[Order1], Fit) # ensure D.Park is plotted in order
