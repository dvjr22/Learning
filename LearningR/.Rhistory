pro <- read.csv("/home/valdeslab/PDB_files/pdb_scripts/sql_scripts/QueryResults/pro_data.csv")
View(pro)
View(pro)
gly <- read.csv("/home/valdeslab/PDB_files/pdb_scripts/sql_scripts/QueryResults/gly_data.csv")
View(gly)
View(gly)
rm(pro)
rm(gly)
gly <- read.csv("/home/valdeslab/PDB_files/pdb_scripts/sql_scripts/QueryResults/gly_data.csv", header = FALSE)
pro <- read.csv("/home/valdeslab/PDB_files/pdb_scripts/sql_scripts/QueryResults/pro_data.csv", header = FALSE)
view(gly)
View(pro)
View(pro)
View(pro.V5)
attach(pro)
View(pro.V5)
View(V5)
plot(V5,V6)
summary(pro)
proPhi = Pro.V5
proPhi = pro.V5
proPhi = V5
proSi = V6
kde2d(proPhi, proSi, h, n = 25, lims = c(range(proPhi), range(proSi)))
library("MASS", lib.loc="/usr/lib/R/library")
kde2d(proPhi, proSi, h, n = 25, lims = c(range(proPhi), range(proSi)))
kde2d(proPhi, proSi, n = 25, lims = c(range(proPhi), range(proSi)))
test = kde2d(proPhi, proSi, n = 25, lims = c(range(proPhi), range(proSi)))
plot(test)
glyPhi - gly.V5
glyPhi = gly.V5
attach(gly)
View(V5)
glyPhi = V5
glyPsi = V6
proPsi = proSi
rm(proSi)
proPhiPsi = kde2d(proPhi, proSi, n = 25, lims = c(range(proPhi), range(proSi)))
glyPhiPsi = kde2d(glyPhi, glyPsi, n = 25, lims = c(range(glyPhi), range(glySi)))
proPhiPsi = kde2d(proPhi, proPsi, n = 25, lims = c(range(proPhi), range(proPsi)))
glyPhiPsi = kde2d(glyPhi, glyPsi, n = 25, lims = c(range(glyPhi), range(glyPsi)))
plot(proPhiPsi)
plot(glyPhiPsi)
rm(list = ls(all = TRUE))
#Clear all variables
rm(list = ls(all = TRUE))
#Quit R
q(save = "yes")
#Citations
citation()
citation(MASS)
#Load a package
library(MASS)
citation(MASS)
citation("MASS")
a = 59
b = 55
c = 53.5
d = 55
e = 52.5
Wing1 = a
Wing2 = b
Wing3 = c
Wing4 = d
Wing5 = e
sqrt(Wing1)
2 * Wing1
Wing1 + Wing2
Wing1 + Wing2 + Wing3 + Wing4 + Wing5
(Wing1 + Wing2 + Wing3 + Wing4 + Wing5)/5
SQ.wing1 = sqrt(Wing1)
mul.w1 = 2 * Wing1
Sum.12 = Wing1 + Wing2
SUM12345 = Wing1 + Wing2 + Wing3 + Wing4 + Wing5
Av = (Wing1 + Wing2 + Wing3 + Wing4 + Wing5)/5
#Brackets to show value
(SQ.wing2 = sqrt(Wing2))
#Concatenate values with c()
Wingcrd = c(a,b,c,d,e, 57.5, 53, 55)
Wingcrd
#Access data just like array
Wingcrd[1]
Wingcrd[2]
Wingcrd[0]
#Display a range
Wingcrd[1 : 5]
#Display all except second value
Wingcrd[-2]
Wingcrd[-2 : -5]
#Add all values
sum(Wingcrd)
s.win = sum(Wingcrd)
sum(Wingcrd)
s.win = sum(Wingcrd)
s.exclude = sum(Wingcrd[-2: -6])
s.win
s.exclude
#Test data
Tarsus <- c(22.3, 19.7, 20.8, 20.3, 20.8, 21.5, 20.6, 21.5)
Head <- c(31.2, 30.4, 30.6, 30.3, 30.3, 30.8, 32.5, NA)
Wt <- c(9.5, 13.8, 14.8, 15.2, 15.5, 15.6, 15.6, 15.7)
sum(Head)
?sum
sum(Head, na.rm = TRUE)
?sum #Read documentation to solve
#Combining variables
BirdData = c(Wingcrd, Tarsus, Head, Wt)
BirdData
Id <- c(1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4)
Id
#repeat()
Id = rep(c(1, 2, 3, 4), each = 8)
#And simplified using a range
Id = rep(1 : 4, each = 8)
Id <- c(1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4)
Id
#repeat()
#Produces the same vector as above
Id = rep(c(1, 2, 3, 4), each = 8)
Id
#And simplified using a range
Id = rep(1 : 4, each = 8)
Id
#Produces a sequence
a = seq(from = 1, to = 4, by = 1)
a
#combine the two
a = seq(from = 1, to = 4, by = 1)
a
a = rep(a, each = 8)
a
VarNames = c("Wingcrd", "Tarsus", "Head", "Wt")
VarNames
Id2 = rep(VarNames, each = 8)
Id2
Id2NoEach = rep(VarNames, 8)
Id2NoEach
?rep
#cbind()
#Contains original varibles in columns
Z = cbind(Wingcrd, Tarsus, Head, Wt)
Z
Wingcrd
Z = cbind(Wingcrd, Tarsus, Head, Wt)
Z
#Access n column
Z[ , 1]
Z[ , 1] #column 1
Z[1:8, 1] #column 1
Z[2, ] #row 2
Z[2, 1:4] #row2
#Experiments with access
Z[1, 1] #row 1, column 1
Z[ , 2:3] #column 2 and 3
X = Z[4, 4] #row4, column4
X
X = Z[4, 4] #row4, column4
X
Y = Z[ , 4] #column 4
Y
Z
W = Z[ , -3] #exclude column 3
W
D = Z[ , c(1, 3, 4)] #column 1, 3, 4
D
E = Z [ , c(-1, -3)] #exclude column 1 and 3
E
#dimensions of Z
dim(Z)
(nrow = dim(z)[1])
(nrow = dim(Z)[1])
(ncol = dim(Z)[2])
?nrow
nrow(Z)
nrow
rm(nrow)
rm(ncol)
Zrow = nrow(Z)
Zcol = ncol(Z)
Zrow
Zcol
#rbind()
#Arrange var in rows
Z2 = rbind(Wingcrd, Tarsus, Head, Wt)
Z2
?edit
?fix
#vector()
#Create a vector...yay!
W = vector(length = 8)
W #Will return FALSE
W[1] = 59
W[2] = 55
W[3] = 53.5
W[4] = 55
W[5] = 52.5
W[6] = 57.5
W[7] = 53
W[8] = 55
W
W[1]
W[1:4]
W[2:6]
W[-2]
W[c(1,2,3)]
q()
#setwd("/home/diego/Learning/LearningR") #Laptop
#setwd("/home/valdeslab/Learning/LearningR") #GreenMachine
rm(list = ls()) #clear environment
setwd("/home/valdeslab/Learning/LearningR") #GreenMachine
Sparrows<-read.table(file="RBook/Sparrows.txt", header=TRUE)
names(Sparrows)
library(lattice)
xyplot(Wingcrd ~ Tarsus | Species * Sex,
xlab = "Axis 1", ylab = "Axis 2", data = Sparrows,
xlim = c(-1.1, 1.1), ylim = c(-1.1, 1.1),
panel = function(subscripts, ...){
zi <- Sparrows[subscripts, 3:8]
di <- princomp(zi, cor = TRUE)
Load <- di$loadings[, 1:2]
Scor <- di$scores[, 1:2]
panel.abline(a = 0, b = 0, lty = 2, col = 1)
panel.abline(h = 0, v = 0, lty = 2, col = 1)
for (i in 1:6){
llines(c(0, Load[i, 1]), c(0, Load[i, 2]),
col = 1, lwd = 2)
ltext(Load[i, 1], Load[i, 2],
rownames(Load)[i], cex = 0.7)}
sc.max <- max(abs(Scor))
Scor <- Scor / sc.max
panel.points(Scor[, 1], Scor[, 2], pch = 1,
cex = 0.5, col = 1)
})
S1<-Sparrows[Sparrows$Species=="SESP" & Sparrows$Sex=="Female",3:8]
di <- princomp(S1, cor = TRUE)
Load <- di$loadings[, 1:2]
Scor <- di$scores[, 1:2]
cloud(CHLFa ~ T * SAL | Station, data = Env,
screen = list(z = 105, x = -70),
ylab = "Sal", xlab = "T", zlab = "Chl. a",
ylim = c(26,33),
subset = (Area=="OS"),
scales = list(arrows = FALSE))
Hawaii <- read.table("RBook/waterbirdislandseries.txt", header = TRUE)
library(lattice)
names(Hawaii)
Birds <- as.vector(as.matrix(Hawaii[,2:9]))
Time <- rep(Hawaii$Year, 8)
MyNames <- c("Stilt_Oahu","Stilt_Maui","Stilt_Kauai_Niihau",
"Coot_Oahu","Coot_Maui","Coot_Kauai_Niihau",
"Moorhen_Oahu","Moorhen_Kauai")
ID <- rep(MyNames, each = 48)
xyplot(Birds ~ Time|ID, ylab = "Bird abundance",
layout = c(3, 3), type = "l", col = 1)
ID2 <- factor(ID,
levels=c(
"Stilt_Oahu",
"Stilt_Kauai_Niihau",
"Stilt_Maui",
"Coot_Oahu",
"Coot_Kauai_Niihau",
"Coot_Maui",
"Moorhen_Oahu",
"Moorhen_Kauai"))
xyplot(Birds ~ Time|ID2, ylab = "Bird abundance",
layout = c(3, 3), type = "l", col = 1)
xyplot(Birds ~ Time|ID2, ylab = "Bird abundance",
layout = c(3, 3), type = "l", col = 1,
scales = list(x = list(relation = "same"),
y = list(relation = "free"),
tck=-1))
Species <-rep(c("Stilt","Stilt","Stilt",
"Coot","Coot","Coot",
"Moorhen","Moorhen"),each = 48)
xyplot(Birds ~ Time|Species, ylab = "Bird abundance",
layout = c(2, 2), type = "l", col = 1,
scales = list(x = list(relation = "same"),
y = list(relation = "free")),
groups = ID, lwd=c(1,2,3))
xyplot(Stilt_Oahu + Stilt_Maui + Stilt_Kauai_Niihau ~ Year,
ylab = "Bird abundance", data = Hawaii,
layout = c(2, 2), type = "l", col = 1,
scales = list(x = list(relation = "same"),
y = list(relation = "free")))
setwd("C:/RBook")
Env <- read.table(file ="RBook/RIKZENV.txt", header = TRUE)
library(lattice)
AllAreas <- levels(unique(Env$Area))
for (i in AllAreas  ){
Env.i <- Env[Env$Area==i,]
dotplot(factor(Month)~SAL | Station,
data = Env.i)
win.graph()
}
